<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Strict separation interface/implementation</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h3.c6 {font-weight: bold}
  a.c5 {font-weight: bold}
  i.c4 {font-weight: bold; color: Red}
  b.c3 {font-style: italic; color: Red}
  p.c2 {font-weight: bold}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
      .style2
      {
          color: #FF0000;
          font-style: italic;
          font-weight: bold;
      }
      .style3
      {
          color: #0000FF;
          font-weight: bold;
      }
      </style>
</head>

<body>
  <h2 class="c1">Strict separation of interfaces and implementations</h2>

  <p class="c2">According to the black-box principle, a <span class="style1">Lava</span> class consists of two completely separated parts (that may even reside in different <em>Lava</em> files):</p>

  <ul>
    <li><strong>a (public) class interface and</strong></li>

    <li><strong>a (private, encapsulated, opaque) class implementation.</strong></li>
  </ul>

  <p>The <strong>class interface</strong> (or short: <strong>class</strong>) contains the exported features (<strong>member variables</strong>/attributes and member functions/methods) of the class that can be referenced from anywhere (unless they are <a href="ProtectedFriend.htm#protected">protected</a>). Class interfaces support <strong>multiple inheritance</strong> (with <a href="#virtualBaseClasses">shared base classes</a>), i.e., a class may be derived from several other base classes.</p>

  <p>The implementation contains the &quot;private&quot; features of the class (which cannot be referenced from the &quot;outside world&quot;) and the implementations of all non-abstract functions that are explicitly enumerated in the class interface.</p>

  <p><a id="implInheritance"></a><strong>Methods/Member functions</strong> that are inherited from base classes and that are not overridden in the current class have to be implemented in the implementations of those base classes and need not be re-implemented in the implementation in question. In this (and only this) sense <strong>implementations are inherited (or better: taken over)</strong> from base classes in <strong class="c3">Lava</strong>, quite in contrast to the semantics of the &quot;implements&quot; clauses in <em class="c4">Java</em> classes, which force you to implement <em>all</em> functions (including the inherited base class functions) in the class containing the &quot;implements&quot; clause. (See also <a href="#objectCreation">object creation</a> below.)</p>

  <p><a id="infoHiding"></a>Older, non-object-oriented languages like 
      <span class="style1"><strong>Modula-2</strong></span> and <span class="style1"><strong>Ada</strong></span>, that were based on <strong>&quot;abstract data types&quot;</strong>, had already achieved a clean syntactic separation of <em>&quot;interfaces/definitions&quot;</em> and <em>&quot;implementations&quot;</em> according to the important <strong>&quot;principle of information hiding&quot;</strong>. The same class could be implemented in several alternative ways, and an implementation could be changed without affecting the users of the class, particularly without any need to recompile the dependent program modules.</p>

  <p>Strict separation of interfaces and implementations as well as the distinction between state and value objects is downright a necessity if you aim at a language that is from the beginning on not only object- but also <a href="Components.htm">component-oriented</a>, where components are pre-fabricated, dynamically loadable software modules written in any language, that communicate with other components via standardized function-call interfaces, like <em class="c4">CORBA</em> or <em class="c4">COM</em> components.</p>

  <p>In object-oriented languages this very useful and reasonable separation has been abandoned again so far. The distinction between <strong>public</strong>, <strong>private</strong>, and <strong>protected</strong> members of a class is an insufficient substitute for such a strict syntactic separation.</p>

  <p><a id="JavaInterfaces"></a>The distinction made by 
      <span class="style1"><strong>Java</strong></span> between &quot;<em>interfaces&quot;</em> and <em>&quot;classes</em>&quot; doesn&#39;t meet the requirements as well:</p>

  <ol>
    <li>A <span class="style1"><strong>Java</strong></span> interface is a collection of <em>functions</em> solely. You cannot specify member <em>data</em> in a 
        <span class="style1"><strong>Java</strong></span> interface. So you could speak of a <em class="c4">Java</em> interface as being a purely <strong>behavioral view</strong> of a class that implements the interface, whereas a <em class="c4">Lava</em> class interface is just <strong>the public (implementation-independent) part of a class</strong>.</li>

    <li>You <em>need not use</em> <strong class="c3">Java</strong> interfaces; you can completely ignore them and use classes instead, as in 
        <span class="style2">C++</span>, to specify the public (interface) as well as the private (implementation) features of objects. A third possibility is to use &quot;abstract classes&quot; as a substitute for interfaces with data members. So there is no clear separation of the roles of interfaces and classes in
        <span class="style1"><strong>Java</strong></span>.</li>
  </ol>

  <p><a id="multipleInheritance"></a>One reason for the dual nature of classes in 
      <span class="style1"><strong>Java</strong></span> is that you need classes in 
      <span class="style1"><strong>Java</strong></span> not only for describing implementations but also for specifying &quot;interfaces with data members&quot;. The reason, in turn, for the absence of data members in 
      <span class="style1"><strong>Java</strong></span> interfaces is the 
      <span class="style1"><strong>Java</strong></span> compromise as to <strong>multiple inheritance</strong>: 
      <span class="style1"><strong>Java</strong></span> interfaces support multiple inheritance, 
      <span class="style1"><strong>Java</strong></span> classes don&#39;t, since a general support of multiple inheritance for classes (including data members) would have been considerably more expensive.</p>

  <p><a id="setGetFunctions"></a>Some people have made a merit of this deficiency by saying that you should not expose data members in interfaces anyway. They recommend that you should declare variables in 
      <span class="style1"><strong>Java</strong></span> always as being of some interface (rather than class) type and use classes solely for describing the implementations of interfaces. But if you strictly separate (public) interfaces and (private) implementations and if, as a consequence, interfaces are the <em>only</em> way of exposing the public features of data types then it would be extremely strange and unnatural in many cases to hide their data members behind <strong>Set/Get... or other access functions</strong>. For <a href="TwoObjectCategories.htm">services</a> this might be acceptable frequently, although it may be more natural even then to expose, e.g., the current balance of a bank account as a read-only data member of an account interface. But for <a href="TwoObjectCategories.htm">value objects</a>, which expressly serve as messages between services and which are primarily characterized by their data structure, it would certainly be unacceptable to hide their data members behind access functions.</p>

  <p>Notwithstanding, access to a data member xy of a <strong class="c3">Lava</strong> class may be <em>implemented</em> by proper <strong>Set and Get functions</strong> that are invoked <em>implicitly</em> on read and assignment access to this data member. In a <strong class="c3">Lava</strong> class you can specify this as an optional property of a data member, but the corresponding Set/Get functions will appear only in the <em>implementation</em> of the class.</p>

  <p>Unlike <span class="style1"><strong>Java</strong></span> classes, a <em class="c4">Lava</em> implementation implements exactly one class (and thus has the same name as the class). <em class="c4">Lava</em> implementations serve <em>only</em> for implementing their corresponding classes, and they do not inherit from other implementations.</p>

  <p><strong><a id="implements"></a>Meaning of &quot;implements&quot;:</strong> If class <em>B</em> extends classes <em>A<sub>1</sub>, ..., A<sub>n</sub></em> then an implementation of <em>B</em> provides implementations of those non-abstract member functions of <em>B</em> that are listed explicitly in the declaration of <em>B</em>, i.e., that override member functions of <em>A<sub>1</sub>, ..., A<sub>n</sub></em> or that have been declared for the first time in <em>B</em>. So an implementation of <em>B</em> <em>does not</em> comprise implementations of <em>A<sub>1</sub>, ..., A<sub>n</sub></em> but concerns only the new or overridden functions of <em>B</em>.</p>

  <h3><strong><a id="objectCreation"></a>O</strong><strong>bject creation</strong></h3>

  <p>A class <em>A</em> may be marked as being &quot;creatable&quot;. Then it may be used in &quot;<span 
          class="style3">new</span>&quot; operations to specify the type of the objects to be created. It is the job of the <strong class="c3">Lava</strong> run time system to find an implementation of <em>A</em>, as well as implementations of all direct or indirect base classes of <em>A</em>. The (&quot;public&quot;) features (member variables and member functions) of all those classes and the (&quot;private&quot;) features of all those implementations are combined and make up the implementation of the new object of type <em>A</em>.</p>

  <p>The search process for an implementation corresponding to a given class <em>A</em> proceeds <a href="Packages.htm#implSearch">as follows</a>: At first the <strong class="c3">Lava</strong> interpreter searches the current file containing the &quot;<span 
          class="style3">new</span>&quot; expression. If an implementation of <em>A</em> isn&#39;t found there then all directly or indirectly included files are searched in the same way for an implementation.</p>

  <p>Note that the &quot;local&quot; features of an implementation, that are declared only within this implementation and that are not exported through the corresponding class interface, cannot be referenced from anywhere outside this implementation. In particular, <strong>an implementation cannot use local features of other implementations</strong> that are &quot;ingredients&quot; of the same object: Implementations may only reference their own (private) features and features that are exported through class interfaces. (The latter features may be declared <a class="c5" href="ProtectedFriend.htm">protected</a>, however, which means that they may be referenced <em>only</em> by implementations of classes that extend the class containing the protected feature.)</p>

  <h3>Interfaces in <span class="style1">Lava</span></h3>

  <p>Because of this close relation between implementations and the class interfaces that they implement we use the term <strong><a id="classNotion"></a>&quot;class&quot;</strong> in <strong class="c3">Lava</strong> just as a synonym for &quot;class interface&quot;.Cf. the section &quot;<a href="Packages.htm#implSearch">How <em>Lava</em> locates implementations of classes</a>&quot; to understand how different implementations may be associated with the same class.</p>

  <p>The <strong class="c3">Java</strong> notions of &quot;interface&quot;, &quot;class&quot;, &quot;implements&quot; and &quot;extends&quot; provide two unrelated inheritance structures: one for interfaces and one for classes. You can use classes as well as interfaces to declare the types of variables, and a <strong class="c3">Java</strong> class may implement any number of interfaces. We believe that all this is more confusing as helpful for programmers. In contrast to this, <em class="c4">Lava</em> provides an inheritance notion only for class interfaces (= classes), types of <em class="c4">Lava</em> variables can be declared only with classes, and a <em class="c4">Lava</em> implementation implements exactly one class interface and doesn&#39;t serve any other purpose.</p>

  <h3>Shared base classes</h3>

  <p><strong class="c3"><a id="virtualBaseClasses"></a>Lava</strong> supports <strong>multiple inheritance with shared base classes</strong>, where &quot;shared base class&quot; is used in the sense of the &quot;virtual base classes&quot; of <em class="c4">C++</em>: If a <strong class="c3">Lava</strong> class A inherits the same base class B several times on several inheritance paths then an object of type A contains only one base object of type B.</p>

  <p>Note that <strong>&quot;virtual base class&quot;</strong> means something different in <em class="c4">Lava</em> than in <strong class="c3">C++</strong>: <strong class="c3">Lava</strong> allows you to specify a <a href="PatternsFrameworks.htm#VT">virtual type</a> as a base class of a new class, and these are called &quot;virtual base classes&quot;. Cf. our <a href="VirtualBaseSamples.htm">virtual base samples</a>. <em class="c4">Lava</em> virtual base classes provide one particular way to implement <strong>mixins</strong> in <em class="c4">Lava</em> (see below).</p>

  <h3 class="c6"><a id="mixins"></a>Mixins, multiple inheritance, virtual base classes</h3>

  <p>Often you would like to enhance some basic class with flexibly selectable supplementary feature sets. Usually such a supplementary feature set wouldn&#39;t represent a class of objects that may be created independently but it rather resembles a garnishment that you may select for your meal in better restaurants: they are not meals of their own but just supplements.</p>

  <p>In the programming context such supplements are called <strong>mixins</strong>. (Cf. the discussion (in German) of <a target="_blank" href="http://www.wikiservice.at/dse/wiki.cgi?MixIn">mixins</a> in <a target="_blank" href="http://www.memorymanagement.org/">DseWiki</a>.) <strong class="c3">Lava</strong> provides essentially two different ways to realize mixins:</p>

  <ol>
    <li><strong>By multiple inheritance</strong>, where the enhanced class inherits from some basic primary class and from selectable supplementary classes that often will be <a href="#objectCreation">non-creatable</a> since it doesn&#39;t make sense to create objects from them.</li>

    <li><strong><a href="#virtualBaseClasses">By virtual base classes</a></strong> (see above). This resembles the way how mixins may be implemented in <strong class="c3">C++</strong> (apart from multiple inheritance as in <strong class="c3">Lava</strong>): In <strong class="c3">C++</strong> you can declare template classes in a way that their base class(es) are template parameters.</li>
  </ol>

  <h3>See also</h3>

  <p class="c2"><a href="ProtectedFriend.htm">&quot;Private / protected / friend&quot; <strong>counterparts</strong> in <strong class="c3">Lava</strong></a></p>

  <p class="c2"><a href="TwoObjectCategories.htm">Two object categories</a></p>

  <p class="c2"><a href="ObjectLifeCycle.htm">Stages in the life of <strong class="c3">Lava</strong> objects</a></p>

  <p class="c2"><a href="Components.htm">Component objects</a></p>
</body>
</html>
