<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<meta http-equiv="Content-Language" content="en-us">
<TITLE>Editing executable code</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="Klaus D. Günther" name=Author>
<META content="Microsoft FrontPage 5.0" name=GENERATOR>
<meta name="ProgId" content="FrontPage.Editor.Document">
<LINK href="LavaStyles.css" 
rel=STYLESHEET type=text/css></HEAD>
<BODY>

<h2 align="center">Editing executable code</h2>

<p align="left">Executable code is represented in the <a href="EditTree.htm">declaration
tree</a> by the keywords &quot;exec&quot; and &quot;constraint&quot;. You may
double-click these keywords or click the spectacles <B>
<IMG SRC="../images/Spectacles.png" ALT="Open property sheet" ALIGN="ABSMIDDLE" width="22" height="20">
 </B> to view the code in the <B><I><FONT color=#ff0000>Lava</FONT></I></B> 
exec editor.</p>
<P>The <B><I><FONT color=#ff0000>Lava</FONT></I></B> exec view displays 
executable <B><I><FONT color=#ff0000>Lava</FONT></I></B> code in a so-called 
"rich edit view" window as normal text, but the normal text editing functions 
are disabled and replaced by the so-called <B>structure editing</B> mode. Unlike 
normal text editing, structure editing allows you to select, insert, delete, 
replace, etc. only whole syntactic constructs (rather than individual 
characters). This fundamental difference would require some relearning but once 
you have understood its principles structure editing is much more productive and 
much less error-prone than traditional program development based on text 
editing.</P>
<H3>The basic ideas of structure editing are:</H3>
<P><B>You just select a <I><FONT color=#ff0000>Lava</FONT></I> construct for 
insertion by clicking an associated tool button. You need not know its 
syntactical structure in advance: <I><FONT color=#ff0000>LavaPE</FONT></I> will 
insert a "template" of that construct for you which exhibits its syntactical 
structure and contains placeholders for nested constructs that you may insert 
subsequently.</B></P>
<P><B>Optional parts of a construct can be deleted or reinserted if 
required.</B></P>
<P><B>Clicking a special <I>insertion button</I>  or pressing the RETURN key causes an additional "empty" 
copy of a repeatable sub-construct to be inserted after or before the selected
copy (depending on the current state of the </B><b>"Insert before"</b><B> </B><b>button
</b><IMG align=absMiddle 
alt="insert before" height=19 src="../images/InsertBefore.png" width=20><B>).</B></P>
<P><B><A href="StructEdAdvant.htm"><B>Advantages of <FONT 
color=#ff0000><I>Lava</I></FONT> structure editing</B></A> </B></P>
<H3><a name="exec"></a>The three types of <I><FONT color=#ff0000>Lava</FONT></I> executables</H3>
<P>Three types of <B><I><FONT color=#ff0000>Lava</FONT></I></B> entities may or 
must be associated with executable code:</P>
<UL>
  <LI><B>Initiators</B>, which serve as autonomous "<b><font color="#0000FF">main</font></b> programs" or "top level 
  threads" in <i><b><font color="#FF0000">Lava</font></b></i>. They must have an executable body, or short: an <b>&quot;exec&quot;</b> 
  (which starts with the keyword &quot;<b><font color="#0000FF">main</font></b>&quot;).<LI><B>Member functions</B> of interfaces and implementations, which must have 
  an <b>exec</b>, too. A member function of an interface is automatically included in 
  all implementations of that interface, but its exec occurs only in the 
  implementation, not in the interface. 
  <LI><B><a name="constraint"></a>Constraints</B> of interfaces. An interface need not have a constraint, 
  but if it has one, then it is executed automatically whenever a newly created 
  object supporting this interface leaves the respective object creation 
  construct (&quot;new&quot; or "clone"). (Only the constraint of the new
    object's interface is executed, not those of base interfaces.)&nbsp; </LI></UL>
<P>In the <B><I><FONT color=#ff0000>LavaPE</FONT></I></B> tree view execs and 
constraints are associated with a specific little icon 
<IMG align=absMiddle 
alt="exec icon" src="../Samples/LavaIcons/constrai.png" width="21" height="15">which 
you may double-click to open the corresponding <B><I><FONT 
color=#ff0000>LavaPE</FONT></I></B> exec view. Alternatively you may 
<I>select</I> the exec/constraint node of the declaration tree and then click 
the spectacles 
<IMG align=absMiddle alt=spectacles 
src="../images/Spectacles.png" width="22" height="20"> on the <A 
href="EditTree.htm#declBar">declaration bar</A> to open the selected exec in a 
new exec view window. </P>
<H3>The three exec editing toolbars</H3>
<P>Three specific toolbars belong to the <B><I><FONT 
color=#ff0000>Lava</FONT></I></B> exec view: the <B>"editing toolbar"</B> </P>
<P align=center><img border="0" src="../images/ExecSwitchTB.png" width="276" height="32"> </P>
<P>displaying various symbols of editing operations and of buttons that switch
forth and back between different display modes and formats,<BR><BR>the 
<B>"operator toolbar"</B> </P>
<P align=center><img border="0" src="../images/OpTB.png" width="637" height="32"> </P>
<P>displaying various <B><I><FONT color=#ff0000>Lava</FONT></I> operators 
</B>that can be used to construct <B><I><FONT color=#ff0000>Lava</FONT></I></B> 
 expressions and statements,<BR><BR>and the vertical <B>"keywords toolbar"</B>, displaying the 
primary keywords of all <B><I><FONT color=#ff0000>Lava</FONT></I> keyword 
constructs</B>:</P>
<H3>Basics of exec editing</H3>
<P>
<img border="0" src="../images/KeywdTB.png" border="0" align="left" hspace="10" vspace="10" width="56" height="519"><B>Context-sensitive help</B></P>
<P>Use the context-sensitive help of <I><FONT 
color=#ff0000><B>LavaPE</B></FONT></I> to get information about individual menu 
items and operator and keyword tool buttons: Click the context help tool button 
<IMG align=absMiddle alt="context help" src="../images/CtxHelp.png" width="22" height="23">, drag it to the respective <I><FONT 
color=#ff0000><B>Lava</B></FONT></I> tool button or menu item for which you want 
to get an explanation and drop it there. </P>
<P><B>Pay attention to status bar hints</B></P>
<P>Depending on the current selection, the status bar will in many cases display 
hints on what you can do next. <B><I><FONT color=#ff0000>Lava</FONT></I></B> 
beginners should pay attention to these hints.</P>
<P><B>How to insert/delete statements</B></P>
<P>If you have selected a statement placeholder <FONT 
color=#ff0000>&lt;stm&gt;</FONT> and if you then click one of the enabled 
statement tool buttons then the placeholder is <B><I>replaced</I></B> with the 
corresponding statement template.</P>
<P>If you have selected an existing statement, rather than a placeholder, and if 
you then click one of the enabled statement tool buttons then the corresponding 
statement template is<B> inserted after</B> or <B>before</B> the selected 
statement, depending on the state of the "Insert before" tool button <IMG 
align=absMiddle alt="insert before" height=19 src="../images/InsertBefore.png" 
width=20>. If the selected statement was an operand of a logical conjunction 
(<B><FONT color=#0000ff>and</FONT></B> / <FONT color=#0000ff><B><FONT 
color=#0000ff>;</FONT></B></FONT>, <B><FONT color=#0000ff>or</FONT></B>, 
<B><FONT color=#0000ff>xor</FONT></B>) then the inserted statement is a new 
operand of the same logical conjunction. If the selected statement wasn't part 
of a conjunction then the inserted statement is connected by a logical "<B><FONT 
color=#0000ff>and</FONT></B> / <B><FONT color=#0000ff>;</FONT></B>" conjunction 
to the selected statement.</P>
<P>If you have selected an existing statement <B>or</B> a placeholder and if you 
then click the "Insert empty copy" tool button 
<IMG align=absMiddle 
alt="insert placeholder" src="../images/InsertCopy.png" width="21" height="20">  or
press the RETURN key then 
a new placeholder <FONT color=#ff0000>&lt;stm&gt;</FONT> is<B> inserted 
after</B> or <I><B><FONT color=#ff0000>before</FONT></B></I> the selected 
statement, depending on the state of the "Insert before" tool button <IMG 
align=absMiddle alt="insert before" height=19 src="../images/InsertBefore.png" 
width=20>. The same rule as in the preceding paragraph applies to the logical 
conjunction that is used for the new placeholder.</P>
<P>If you have selected an existing (non-placeholder) statement and if you then 
click the "scissors" tool button 
<IMG align=absMiddle alt=scissors 
src="../images/Scissors.png" width="16" height="20"> then he selected statement is deleted and 
written to the clipboard if it was an operand of a logical conjunction; if it 
wasn't, then the statement is replaced with a <FONT 
color=#ff0000>&lt;stm&gt;</FONT> placeholder in a first step; only if you 
attempt to delete the latter in turn the entire containing construct will be 
deleted.</P>
<P>If you press the <B>DEL</B> key instead of clicking the scissors<IMG 
align=absMiddle alt=scissors src="../images/Scissors.png" width="16" height="20"> 
then the statement is deleted but not written to the clipboard.</P>
<P>See also &quot;<a href="#returnKey">Using the return key ...</a>&quot;.</P>
<P><B>How to insert/delete expressions</B></P>
<P>If you have selected an existing expression <I>or</I> an expression 
placeholder <FONT color=#ff0000>&lt;expr&gt;</FONT> and if you then click one of 
the enabled expression tool buttons from the operator or keywords toolbar then 
the expression/placeholder is <B>replaced</B> with the corresponding expression 
template. </P>
<P>If you have selected an existing expression <I>or</I> expression placeholder 
and if you then click the "Insert empty copy" tool button 
<IMG align=absMiddle 
alt="insert placeholder" src="../images/InsertCopy.png" width="21" height="20"> then 
a new placeholder <FONT color=#ff0000>&lt;expr&gt;</FONT> is inserted 
<B>after</B> or <B>before</B> the selected expression, depending on the state of 
the "Insert before" tool button <IMG align=absMiddle alt="insert before" 
height=19 src="../images/InsertBefore.png" width=20>. But note that for 
expressions the "Insert empty copy" button is only enabled if the selected 
expression is an operand of an operation supporting multiple operands, like "+" 
or "*". The inserted new placeholder is treated as an additional operand of this 
same operation.</P>
<P>If you have selected an existing expression and if you then click the 
"scissors" button 
<IMG align=absMiddle alt=scissors 
src="../images/Scissors.png" width="16" height="20"> then he selected expression is replaced 
with a placeholder <FONT color=#ff0000>&lt;expr&gt;</FONT> and written to the 
clipboard. If you press the <B>DEL</B> key instead then it is deleted but not 
written to the clipboard.</P>
<P>If you click the scissors or press the <B>DEL</B> key on an expression 
placeholder then the latter is deleted if the placeholder was an operand of a 
multiple operand operation; otherwise the entire containing construct is 
deleted.</P>
<P>See also &quot;<a href="#returnKey">Using the return key ...</a>&quot;.</P>
<P><B>How to insert/delete other kinds of repeatable constructs</B></P>
<P><B><I><FONT color=#ff0000>Lava</FONT></I></B> provides a number of constructs 
containing repeatable clauses other than statements and expressions, for 
instance the <B><FONT color=#ff00ff>elsif</FONT></B> clauses of <B><FONT 
color=#0000ff>if</FONT></B> statements and <B><FONT color=#0000ff>ifx</FONT></B> 
expressions, the <B><FONT color=#0000ff>case</FONT></B> clauses of the <B><FONT 
color=#0000ff>switch</FONT></B> and <B><FONT color=#0000ff>type</FONT></B> 
statements, and the quantifier clauses of the <B><FONT 
color=#0000ff>declare</FONT></B>, <B><FONT color=#0000ff>exists</FONT></B>, 
<B><FONT color=#0000ff>foreach</FONT></B>, <B><FONT 
color=#0000ff>delete</FONT></B> statements and of the <B><FONT 
color=#0000ff>select</FONT></B> expression. They all begin, except for the 
quantifiers, with a characteristic keyword which you can click to select the 
entire clause. You can delete the selected clause in the usual way using the 
scissors <IMG align=absMiddle alt=scissors 
src="../images/Scissors.png" width="16" height="20"> or the <B>DEL</B> key. You can click the 
"Insert empty copy" button to insert a new template of this kind of clauses 
<B>after</B> or <B>before</B> the selected clause, depending on the state of the 
"Insert before" tool button <IMG align=absMiddle alt="insert before" height=19 
src="../images/InsertBefore.png" width=20>.</P>
<P>The quantifiers of <B><FONT color=#0000ff>declare</FONT></B> don't contain 
any keyword that could be clicked to select the entire quantifier clause. As a 
substitute you can select the <FONT color=#ff0000>&lt;type&gt;</FONT> 
placeholder or the specified concrete type reference that has replaced it before 
you click <IMG align=absMiddle alt=scissors 
src="../images/Scissors.png" width="16" height="20">or 
<IMG align=absMiddle 
alt="insert placeholder" src="../images/InsertCopy.png" width="21" height="20"> or 
press <B>DEL</B>. In the delete case a type reference will be replaced with a 
<FONT color=#ff0000>&lt;type&gt;</FONT> placeholder in a first step before you 
can then delete the entire quantifier.</P>
<P>The other quantifiers, running through finite sets of objects, can be 
selected also by clicking their characteristic <B><FONT 
color=#0000ff>in</FONT></B> keyword.</P>
<P>Every quantifier contains a list of one or several variables. You can use 
<IMG align=absMiddle alt="insert placeholder" 
src="../images/InsertCopy.png" width="21" height="20">, <IMG align=absMiddle 
alt="insert before" height=19 src="../images/InsertBefore.png" width=20>, 
<IMG 
align=absMiddle alt=Cut/Copy/Paste src="../images/CutCopyPaste.png" width="70" height="22">, and <B>DEL</B> in the obvious way for these. </P>
<P>See also &quot;<a href="#returnKey">Using the return key ...</a>&quot;. </P>
<P><B>How to insert/delete optional parts</B></P>
<P>Optional parts of a <B><I><FONT color=#ff0000>Lava</FONT></I></B> construct 
begin with a purple keyword, for instance <B><FONT 
color=#ff00ff>elsif</FONT></B>, <B><FONT color=#ff00ff>else</FONT></B>, <B><FONT 
color=#ff00ff>but</FONT></B>, or <B><FONT color=#ff00ff>where</FONT></B>. By 
clicking this keyword and pressing the <B>DEL</B> button you can delete the 
optional part.</P>
<P>Select the <B><I><FONT color=#ff0000>Lava</FONT></I></B> construct and click 
the "Show empty optionals" tool button 
<IMG align=absMiddle 
alt="{short description of image}" src="../images/ShowOpts.png" width="24" height="20"> to reinsert templates for all currently non-existing optional parts of 
that construct.</P>
<P><B>How to insert, edit and step through comments</B></P>
<P>The yellow balloon 
<IMG align=absMiddle alt=Comment 
src="../images/Comment.png" width="22" height="21"> may be clicked to add or change a comment 
that is associated with the <B><I><FONT color=#ff0000>Lava</FONT></I></B> 
construct that is currently selected in the exec view. The button 
<IMG 
align=absMiddle alt="Toggle comments" 
src="../images/ToggleComments.png" width="22" height="21"> may be used to toggle the 
visibility of comments in <B><I><FONT color=#ff0000>Lava</FONT></I></B> execs. 
Comments are shown directly within the exec text, while in the tree view they 
are displayed in the comment page of the utility window if you select a 
commented tree node.</P>
<P><B>Error navigation</B></P>
<P>The two buttons <IMG align=absMiddle alt=Errors 
src="../images/Errors.png" width="48" height="23"> may be used to open/close the error message 
window and to step from error to error in forward or backward direction. If you 
select a faulty (=red) construct then the first error message referring to that 
construct is displayed also in the status bar.</P>
<P><B>Cut/copy/paste</B></P>
<P>Cut/copy/paste work in the usual way, but for execs currently only <I>within 
the same exec</I>. Proper enabling/disabling of the corresponding buttons 
<IMG 
align=absMiddle alt=Cut/Copy/Paste src="../images/CutCopyPaste.png" width="70" height="22"> combined with subsequent checks that are performed anyway after each 
edit operation prevent syntactically inadmissible operations. Drag-and-drop, 
which is available in the declaration view, would be desirable also in the exec 
view. But its implementation is not quite easy and has been postponed so 
far.</P>
<P><B>Undo/Redo</B></P>
<P>Use the "Undo" and "Redo" buttons 
<IMG align=absMiddle border=0 
src="../images/UndoRedo.png" width="43" height="23"> to undo or redo individual edit 
operations in any of the <B><I><FONT color=#ff0000>LavaPE</FONT></I></B> views 
step by step on a "per document" basis. (Every document (= <B><I><FONT 
color=#ff0000>Lava</FONT></I></B> file) has its own undo/redo memory.) The redo 
memory is deleted in the usual way after a new edit operation, the undo memory 
when the current document is saved.</P>
<P><B>Go to declaration / return to reference</B></P>
<P>You can double-click any reference to a <B><I><FONT 
color=#ff0000>Lava</FONT></I></B> entity in an exec to jump to its declaration. 
Alternatively you can select the reference and click the "Go to declaration" 
button 
<IMG align=absMiddle alt="go to declaration" 
src="../images/GoToDecl.png" width="22" height="21">. Use the "Return to reference" button 
<IMG align=absMiddle alt="return to reference" 
src="../images/ReturnToRef.png" width="23" height="21"> to follow the sequence of such "Go to 
declaration" operations in backward direction (= back to the locations from 
where you came). Both operations may jump forth and back between exec and 
declaration views and even between different ("included") <B><I><FONT 
color=#ff0000>Lava</FONT></I></B> documents.</P><P><b><a name="arrowKeys"></a>Using the arrow keys
(up/down/left/right) to walk through the exec constructs</b></P><P>You can use
the arrow keys to move the current selection through the nested exec constructs
in up/down/left/right direction: &quot;Cursor right/left&quot; means to move the
selection forth and back between &quot;siblings&quot; having the same containing
(&quot;parent&quot;) construct, for instance from statement to statement within
the <b><font color="#0000FF">then</font></b> part of an <font color="#0000FF"><b>if</b></font> 
statement. &quot;Cursor up&quot; means to move the selection to the containing (&quot;parent&quot;) 
construct. &quot;Cursor down&quot; means to move the selection to the first child 
construct (if there is one).</P><P><b>How to open/close the little edit windows 
for constants and variable names</b></P><P>If the selection is on a constant or 
on a variable name (in the declaration of the variable) or on an
<font color="#FF0000">&lt;expr&gt;</font> or <font color="#FF0000">&lt;varName&gt;</font> 
placeholder then &quot;cursor down&quot; opens a little edit window that allows you to 
edit the constant or the variable name. The same effect is achieved by 
double-clicking that item or by clicking the spectacles or by clicking again on 
the item 
<IMG align=absmiddle alt=spectacles 
src="../images/Spectacles.png" width="22" height="20"> after you have selected it.</P><P>You close a 
little edit window by pressing the return or ESC or &quot;cursor up&quot; key or by 
clicking on another construct outside the window.</P><P><b><a name="returnKey"></a>Using the return key to insert another
placeholder</b></P>
<p>If the selection is on any repeatable construct then you can press the return
key to insert a placeholder for another construct of this same type, e.g., a
statement placeholder <font color="#FF0000">&lt;stm&gt;</font> if the selection
is on a statement, an expression placeholder <font color="#FF0000">&lt;expr&gt;</font>
if it is on an expression, an <font color="#0000FF"><b>elsif</b></font> <b>... <font color="#0000FF">then</font></b>
clause if it is on <font color="#0000FF"><b>elsif</b></font> or <b> <font color="#0000FF">then</font></b>,
a new quantifier if it is on the type name or on the <font color="#FF0000">&lt;type&gt;</font>
placeholder of an existing quantifier, a new local variable if it is on a
variable name or on a <font color="#FF0000">&lt;varName&gt;</font> placeholder
in a <b><font color="#0000FF">declare</font></b>, <font color="#0000FF"><b>exists</b></font>,
<b><font color="#0000FF">foreach</font></b>, or <b><font color="#0000FF">select</font></b>
construct.</p>
<p><b><a name="keyboardCentric"></a>Keyboard-centric editing of <font color="#FF0000"><i>Lava</i></font>
execs</b></p>
<p>You can invoke the more important and frequent exec editing operations
without using the mouse. Most of the keyword constructs can be inserted by
pressing the underlined character of the keyword. For the operation toolbar, the
tool tips on the status line tell you which character to use. You can use
CTRL-1, CTRL-2, CTRL-3 to open the list box associated with the first, second,
or third exec combo-box, and you can use the down and up arrow keys to step
through the list items; finally you press the RETURN key to select the currently
highlighted item. Use the arrow keys to <a href="#arrowKeys">navigate</a>
between parent, child, and sibling constructs as described above. Use the RETURN
key to <a href="#returnKey">insert templates/placeholders</a> for repeatable
constructs.</p>
<p><b>Top-down, bottom-up, and mixed-order construction of expressions</b></p>
<p>Expressions containing operators can be constructed in the standard&nbsp;
top-down style of <font color="#FF0000"><b><i>Lava</i></b></font> exec editing,
but also in bottom-up or mixed order. For instance, if you have already
constructed &quot;1 + 2&quot; and you want to make this sum appear as the second
factor of a product &quot;<font color="#FF0000">&lt;expr&gt;</font> * (1 +
2)&quot;, then just do the following:</p>
<ol>
  <li>Depress the &quot;Insert before&quot; button <IMG align=absMiddle alt="insert before" 
height=19 src="../images/InsertBefore.png" width=20>. This causes the <font color="#FF0000">&lt;expr&gt;</font>
    to be inserted <i>before</i> the &quot;1 + 2&quot;.</li>
  <li>Select the entire sum &quot;1 + 2&quot;: Either click the plus sign, or
    select one of the two addends (&quot;1&quot; or &quot;2&quot;) and <a href="#arrowKeys">press
    the up-arrow key</a> to select its parent construct &quot;1 + 2&quot;.</li>
  <li>Click the &quot;*&quot; tool button or press the &quot;*&quot; key to
    produce &quot;<font color="#FF0000">&lt;expr&gt;</font> * (1 + 2)&quot; as
    desired.</li>
</ol>
</BODY></HTML>