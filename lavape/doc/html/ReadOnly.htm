<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Read-Only functions and clauses</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c5 {font-weight: bold}
  b.c4 {font-style: italic; color: Red}
  i.c3 {font-weight: bold; color: Red}
  h3.c2 {text-align: left}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
      .style2
      {
          color: #FF0000;
          font-style: italic;
      }
      .style4
      {
          color: #FF0000;
          font-style: italic;
          font-weight: bold;
      }
      .style5
      {
          color: #0000FF;
      }
      .style6
      {
          color: #CC00CC;
          font-weight: bold;
      }
  </style>
</head>

<body>
  <h2 class="c1">Read-only clauses/functions/invariants</h2>

  <h3 class="c2">Preliminary remark</h3>

  <p>In <em class="c3">Lava</em>, conditional clauses, like <span class="style1">if</span>-conditions, are not <em>Boolean</em> or other <em>expressions</em> but quite normal <em>statements</em>, whose evaluation yields a truth value (<span 
          class="style1">true</span> or <span class="style1">false</span>). This is a consequence of our general opinion that <em class="c3">Lava</em> programs are not sequences of instructions/operations but <em>logical statements</em>, and program execution means <em>verification</em> of those statements.</p>

  <p>In this context, assignment of values to variables (using the 
      <span class="style1">set</span> or <span class="style1">copy</span> statements or output parameters of functions) requires particular consideration:</p>

  <p>Verification of the statement</p>

  <blockquote>
    <p><span class="style1">set</span> x <span class="style1">&lt;==</span> &lt;expression&gt;</p>
  </blockquote>

  <p>simply means to assume the validity of the equation</p>

  <blockquote>
    <p>x <span class="style1">=</span> &lt;expression&gt;</p>
  </blockquote>

  <p>for the further verification process. Furthermore, <em class="c3">Lava</em> statements have to be ordered in such a way as to enable a sequential verification process. In particular, a value must be assigned (using <strong>set</strong>/<strong>copy</strong> or through output parameters) to a variable before it can in turn be used as an input parameter or as part of an expression.</p>

  <h3>Definition:</h3>

  <p>An executable <b class="c4">Lava</strong> construct has the <strong>read-only</strong> property (or is <strong>free of side-effects</strong>) if its execution doesn&#39;t change any pre-existing objects, i.e., objects that existed already before the execution of the construct started.</p>

  <h3>Read-only <span class="style2">Lava</span> functions</h3>

  <p>If a function is declared &quot;read-only&quot; then <em class="c3">Lava</em> makes sure</p>

  <ol>
    <li>that its body assigns values (using <span class="style1">set</span>/<span 
            class="style1">copy</span> statements, or output parameters) only to 
        <span class="style1">declare</span> variables and to output parameters. The body of a read-only initializer may also assign values to attributes of the self object (but not in turn to attributes of attributes, etc.),</li>

    <li>that it calls only read-only functions.</li>
  </ol>

  <p>These two conditions together guarantee that the function doesn&#39;t change any object that existed already before the function call.</p>

  <h3><span class="style2">Lava</span> constructs with inherent read-only semantics</h3>

  <p>A <span class="style4">Lava</span> construct has inherent read-only semantics if it is</p>

  <ol>
    <li>an<span class="style5"> <strong>if</strong></span>, <span class="style1">elsif</span>, 
        <span class="style1">ifx</span> <strong>branching condition</strong>, or</li>

    <li>a statement that is evaluated by the &quot;<span class="style1">?</span>&quot; operator to yield a Boolean 
        <span class="style1">true</span>/<span class="style1">false</span> result,</li>

    <li>a <strong>selection condition</strong>, i.e., as the <span class="style6">where</span> clause of the 
        <span class="style1">exists</span> or <span class="style1">foreach</span> quantifiers or of the 
        <span class="style1">select</span> expression,</li>

    <li>an <strong>invariant ( = continuation condition)</strong> in a class or implementation declaration,</li>

    <li>the logical negation <strong>not</strong> or the exclusive &quot;or&quot; 
        <span class="style1">xor</span> , where &quot;A <span class="style1">xor</span> B&quot; is interpreted as &quot;((<span 
            class="style1">not</span> A) <span class="style1">and</span> B) or (A 
        <span class="style1">and</span> (<span class="style1">not</span> B))&quot;.</li>
  </ol>

  <p>In contrast to the body of a read-only function, these inherently read-only constructs must not contain 
      <span class="style1">declare</span> or <em>any</em> form of assignment for simplicity.</p>

  <p>In the first four cases it would be <em>technically possible</em> to allow assignments within these constructs, but it would be <em>problematic</em> to allow them, since a branching/selection/continuation decision could be invalidated by the very evaluation of the controlling conditional, selection, or invariant clause if we would allow side-effects. I.e., the decisive condition for branching, selection, or continuation possibly wouldn&#39;t hold any longer immediately after the evaluation.</p>

  <p>In case 5 it would have unpleasant <em>technical</em> consequences for the <em>implementation</em> if an assignment would occur in such a clause of the program that would force us to verify the <em>negation</em> of an assignment:</p>

  <blockquote>
    <p><span class="style1">not</span> (x <span class="style1">=</span> &lt;expression&gt;)</p>
  </blockquote>

  <p>during the verification process, since x could then assume infinitely many possible values generally (viz. all values <em>not</em> equal to the value of &lt;expression&gt;). Therefore, since we do not like to test the truth value of the program statement for each of these infinitely many possible values of x, we prefer to exclude all constructs from the <em class="c3">Lava</em> language that could provoke such a situation.</p>

  <h3>See also</h3>

  <p class="c5"><a href="SingleAssigLogSem.htm">Logical semantics of <em>Lava</em></a></p>
</body>
</html>
