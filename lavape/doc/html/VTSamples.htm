<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <title>Basic virtual type samples</title>
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <link href="LavaStyles.css" type="text/css" rel="STYLESHEET" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  a.c5 {font-weight: bold}
  em.c4 {font-weight: bold; color: Red}
  p.c3 {font-weight: bold}
  strong.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
  </style>
</head>

<body>
<h2 class="c1">Basic virtual type samples</h2>

<h3>Sample files</h3>

<p>Please open <strong>ChoralSociety.lava</strong> in <strong class="c2">LavaPE</strong>.</p>

<p>Please open <strong>ModelView.lava</strong> in <strong class="c2">LavaPE</strong>.</p>

<p>Please open <strong>QueueOfPoint.lava</strong> in <strong class="c2">LavaPE</strong>.</p>

<p>Please open <strong>Visitor.lava</strong> in <strong class="c2">LavaPE</strong>.</p>

<p>Please open <strong>FinalVirtualType.lava</strong> in <strong class="c2">LavaPE</strong>.</p>

<p>Please open <strong>ForceFunctionOverride.lava</strong> in <strong
class="c2">LavaPE</strong>.</p>

<h3>Topic</h3>

<p>Interfaces and packages with type parameters ("<a
href="PatternsFrameworks.htm#VT">virtual types</a>"), <a
href="PatternsFrameworks.htm#covariant">covariant specialization</a>.</p>

<h3>Overview</h3>

<p><strong>ChoralSociety:</strong></p>

<p>The ChoralSociety sample provides a package <em>S</em> ("Society") with two
virtual types <em>society</em> and <em>member</em>. In <em>S</em> the value of
<em>society</em> is the type <em>Society</em>, the value of <em>member</em> is
<em>Member</em>. A second package <em>CS</em> ("ChoralSociety") is derived from
<em>S</em> by specializing <em>society</em> to become <em>ChoralSociety</em>
(in turn derived fro <em>Society</em>) and <em>member</em> to become
<em>Singer</em> (derived from <em>Member).</em> As a consequence, the
<em>MemberList</em> becomes a list of <em>Singer</em>s in <em>CS</em>
automatically, and the chairman is also a <em>Singer</em> in <em>CS</em> rather
than just a <em>Member</em>.</p>

<p><strong>ModelView:</strong></p>

<p>The ModelView sample (based on the well-known subject/observer pattern)
reconstructs the corresponding sample from <a
href="TypeSafety.htm#TT">[16]</a>. It provides a package <em>ModelViewFW</em>
("model/view framework") with two type parameters "model" and "view".
"ModelViewFW" contains two mutually recursive types "Model" and "View". "Model"
contains a member vList which is a <em>homogeneous</em> "ViewList" all of whose
elements have the same virtual type setElem=~&lt;view&gt;. (The tilde "~" marks
variable <a href="TwoObjectCategories.htm">state objects</a> in <strong
class="c2">Lava</strong>.)</p>

<p>Package "DrawFW" shows how the (rudimentary) framework "ModelViewFW" could
be specialized by overriding its virtual types (= type parameters) "model" and
"view".</p>

<p>See our <a href="SubstitutableSamples.htm">ModelManyViews</a> sample for
another variant of Model/View that provides an <em>inhomogeneous</em> "ViewList"
containing <em>different</em> types of views (on the basis of "<a
href="TypeSafety.htm#substitutableType">substitutable types</a>").</p>

<p class="c3">QueueOfPoint:</p>

<p>The QueueOfPoint sample corresponds to a similar sample in <a
href="TypeSafety.htm#TT">[16]</a>, too. Compared to <a
href="TypeSafety.htm#TT">[16]</a>, it shows again the advantage of making
virtual types non-substitutable by default: We need not view the virtual type
"elemType" as a special, type-valued <em>member variable</em> of "Queue" objects
but we can introduce virtual types in a more static way as <em>type</em>
<em>parameters</em> of classes and packages.</p>

<p class="c3">Visitor:</p>

<p>The Visitor sample illustrates a special case of the well-known "Visitor"
pattern of <a href="TypeSafety.htm#GOF">[8]</a> and also a special case of <a
href="RepetComputSamples.htm">indirect tree recursion</a>.</p>

<p><strong>FinalVirtualType and ForceFunctionOverride:</strong></p>

<p>Since release 0.9.1 a virtual type (= type parameter) may be declared
"final". This means that it cannot be derived/specialized any further in a
derived class or package. Two new little sample programs (FinalVirtualType.lava
and ForceOverride.lava) explain the motivation behind this and the related
"force override" attribute of member functions. </p>

<h3>Where to look and what to do</h3>

<p><strong>ModelView:<br />
</strong><br />
Note in particular the "<a href="PatternsFrameworks.htm#covariant">covariant
specialization</a>" of the only input parameter of function <em>registerView</em>
of class <em>Model</em>.</p>

<p>Note how this is exploited in the exec of the initiator <em>ModelViewDemo</em>
to pass a view object of the derived type <em>DrawFW::View</em> to this
function.</p>

<p>Note that <em>DrawFW::View</em> is <strong>not</strong> compatible in the traditional
sense (of <a href="TypeSafety.htm#c-derived">c-derivation</a>) to
ModelViewFW::View, since it contains member variables (<em>myModel</em>) and
function parameters (m of initializer <em>ini</em>) that are of a more derived
type in pattern <em>DrawFW</em> than in <em>ModelViewFW</em> (as a consequence of
covariant specialization of the VT <em>&lt;model&gt;</em>).</p>

<p><strong><a id="queueOfPoint"></a>QueueOfPoint:<br />
</strong><br />
Note the difference between the classes <em>X_inner and X_outer</em>: <i>X_inner</i> belongs to pattern <em>Queue</em> (a
class having a VT <em>elemType</em>), whereas <i>X_outer</i> is declared outside 
    class <em>Queue</em>.
Both have a member function <em>f</em> with almost identical implementations.
Look at these:</p>

<p>The difference between the implementations of the two versions of <em>f</em>
is that one of them belongs to pattern <em>Queue,</em> and one doesn't. The
former <strong>has to</strong> use the virtual type <em>&lt;Queue::elemType&gt;</em> of
<em>Queue</em> to declare the local variable <em>p</em>, the latter <strong>cannot</strong>
use this but <strong>must</strong> use the concrete class <em>Point</em> to declare
<em>p</em>. The reasons are:</p>
<ol>
  <li>If a class <em>A</em> is the value of a virtual type <em>V</em> then <em>A</em>
    cannot be referenced directly at any place where <em>V</em> is visible. It
    can only be referenced indirectly by references to <em>V</em> in these
    places. If A1 is derived from A within the same pattern, then A1 cannot be
    referenced directly, either.</li>
  <li>From outside a pattern the VTs of that pattern cannot be referenced (they
    are invisible to the "outside world").</li>
</ol>

<p>The first rule corresponds to <a
href="PatternsFrameworks.htm#VTandNonVT">rule 9</a> in our <em
class="c4">Lava</em> genericity section. Its motivation is explained in our <a
href="IsSelfVirtualSample.htm">IsSelfVirtual sample</a>.</p>

<p>The reason for the validity of the second rule is simple: The value of a VT
(= type parameter) is determined by the respective <a
href="PatternsFrameworks.htm#patternContext">pattern context</a>. So if you are
outside a pattern P and outside of any pattern that is derived from P, the
values of P's VTs at the actual place of reference are just undefined.</p>

<p><strong><a id="visitor"></a>Visitor:<br />
</strong><br />
The <em>Visitor</em> pattern defines an abstract virtual type <em>R</em> for the
result of the visitor's tree evaluation function <em>evaluate</em>. The way how
the visitor walks through the tree is described by this <em>evaluate</em> method
and doesn't depend on <em>R</em>, while the treatment of the individual tree
nodes depends on <em>R</em> and is implemented by the overridden methods
<em>evalLeaf</em> and <em>evalNode</em> of <em>StringVisitor</em> and
<em>IntVisitor</em>. The initiator <em>VisitorDemo</em> shows how a sample tree is
constructed and how this same tree is evaluated twice: once by the
<em>StringVisitor</em> and once by the <em>IntVisitor</em>.</p>

<p>Please notice the comments in the VisitorDemo initiator.</p>

<p><strong>See also</strong> our <a class="c5"
href="CallbackSample.htm">CallbackSample</a></p>
</body>
</html>
