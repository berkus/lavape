<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Repetitive computation samples</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link href="LavaStyles.css" type="text/css" rel="STYLESHEET" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c9 {font-weight: bold}
  div.c8 {text-align: center}
  table.c7 {background-color: #aaffff}
  p.c6 {font-weight: bold; text-align: center}
  p.c5 {text-align: center}
  td.c4 {font-weight: bold}
  strong.c3 {font-style: italic; color: Red}
  em.c2 {font-weight: bold; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
  </style>
</head>

<body>
  <h2 class="c1">Replacing loops by recursion</h2>

  <p>It might appear as a provocation that <em class="c2">Lava</em> abandons sequential loops, and many people will say perhaps that <strong class="c3">Lava</strong> will not be accepted by the majority of programmers for this reason.</p>

  <p>On the other hand, mathematicians (like us) remember very well how surprised they were when they learned their first (procedural) programming language and had to write &quot;do-, for-, repeat- or while-loops&quot;, instead of recursion, and mathematically provocative statements like &quot;n = n+1&quot;.</p>

  <p>Of course, all this is largely a matter of practice and habitude. We believe, however, that it will pay in the long run to abandon &quot;multiple assignment&quot;, and, as a consequence, sequential loops, just as it pays to avoid &quot;go to&quot;. The latter guarantees that the flow of control is essentially directed from top to bottom, except for cases where it returns to the beginning of a loop. Unfortunately, this remaining exception, where the control flow returns to the beginning of a loop, together with multiple assignment, may seriously obscure the data flow of a program:</p>

  <div class="c8">
    <table class="c7" cellspacing="1" cellpadding="20" align="center" border="3" frame="border">
      <tbody>
        <tr>
          <td class="c4" align="middle">Multiple assignment in a jungle<br />
          of loops and branching statements:</td>
        </tr>

        <tr>
          <td valign="top">
            <pre xml:space="preserve">
int x;

while (...)
  if (...)
    while (...) {
      x = f(x,...);
      ...
    }
  else
    while (...)
      if (...) {
        x = g(<strong>x</strong>,...);
    // where has this value of x been assigned???
        ...
      }
      else
        if (...) {
          x = h1(x,...);
          ...
        }
        else {
          x = h2(x,...);
          ...
        }
</pre>
          </td>
        </tr>

        <tr>
          <td valign="top">
            <p class="c5">On read access, the current value of &quot;x&quot;<br />
            may generally originate from assignments<br />
            anywhere above or below the place of the read access:</p>

            <p class="c6">The data flow is obscured.</p>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <p>In contrast to this, if we use recursive functions instead of loops and abandon multiple assignment, then the above &quot;jungle&quot; is decomposed into small functions and the data flow within each of the corresponding function bodies is directed strictly from top to bottom:</p>

  <p class="c9">For every read access to a <em>Lava</em> variable you can easily find the origin of the current value of this variable by following the containing program branch in upward direction (unless the variable is an input variable and therefore a value is assigned to it already <em>outside</em> this function).</p>

  <p class="c9"><a id="topToBottom"></a>Summary: In <em>Lava</em>, both control flow <em>and</em> data flow are directed strictly from top to bottom.</p>

  <p>The most important advantage of this combination of single-assignment and recursion in <em class="c2">Lava</em>, however, is that it enables perfect initialization checks for</p>

  <ul>
    <li>all local variables,</li>

    <li>all output parameters of the current function,</li>

    <li>all variables occurring as input parameters of function calls, and</li>

    <li>all non-optional member variables of classes within initializer functions of classes.</li>
  </ul>

  <h3>Samples</h3>

  <p>In the following we present two categories of samples which are both related to iteration/recursion.</p>

  <p>The <strong>Recursion samples</strong> illustrate how sequential loops can be replaced by tail recursion in a more or less mechanical way and how computationally inefficient forms of recursion, particularly tree recursion, can be transformed into tail recursion.</p>

  <p>The <strong>Iterator/cursor/visitor samples</strong> show how certain aspects and details of aggregate/container objects can be hidden and separated from certain kinds of sequential algorithms that run through these data structures and process the contained items.</p>

  <p>There is a kind of traditional loops that aren&#39;t inherently sequential since they don&#39;t forward information from one pass of the loop to the next. They could therefore be executed concurrently. They typically run through an index range or through the elements of a set and perform an <em>exhaustive</em> or a <em>&quot;stop when found&quot;</em> search. This kind of loops is expressed by <a href="DatabaseIntegration.htm">&quot;quantifiers&quot;</a> 
      <span class="style1">exist</span> and <span class="style1">foreach</span> in <strong class="c3">Lava</strong>, as well as by the <strong><a href="DatabaseIntegration.htm">select</a></strong> expression which corresponds to the SQL select construct and is used to express set-oriented queries. The <strong>Quantifier sample</strong> presents a basic application of 
      <span class="style1">exist</span> and <span class="style1">foreach</span> quantifiers and of set element handles.</p>

  <h3><a href="RecursionSamples.htm">Recursion samples</a></h3>

  <h3><a href="CursorVisitorSamples.htm">Iterator / cursor / visitor samples</a></h3>

  <h3><a href="QuantifierSamples.htm">Quantifier sample</a></h3>
</body>
</html>
