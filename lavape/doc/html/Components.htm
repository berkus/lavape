<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Components</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h3.c7 {text-align: justify}
  p.c6 {text-align: justify}
  em.c5 {font-weight: bold; color: Red}
  p.c4 {text-align: left}
  strong.c3 {font-style: italic; color: Red}
  h3.c2 {text-align: left}
  h2.c1 {text-align: center}
  img#compdemo {margin-right: 20pt}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
  </style>
</head>

<body>
  <h2 class="c1"><span class="style1">Lava</span> component support</h2>

  <h3 class="c2">Component object = &quot;external&quot; object with interfaces</h3>

  <p class="c4">There exists quite a number of different component notions with different goals and features. Although component support in <strong class="c3">Lava</strong> is still in an early, conceptual phase, our basic ideas about components can already be outlined:</p>

  <p class="c4">From the <strong class="c3">Lava</strong> perspective, components are various kinds of containers of &quot;external&quot; objects which in turn may have different types. The type of an object is designated by an <strong class="c3">Lava</strong><strong>-external type identifier</strong>, and an object may be processed by the respective <strong class="c3">Lava</strong> client program through one or several &quot;interfaces&quot;. For locating the proper object owner, object server, or the memory location of a <em>persistent</em> object we need a <strong>&quot;uniform resource locator&quot;</strong> (URL) additionally .</p>

  <p class="c4">The &quot;remote access&quot; components that are presently on the market, like COM/DCOM, Enterprise Java Beans (EJB), CORBA objects and CORBA Component Model (CCM), are examples of component notions that can be interpreted in this unified way.</p>

  <p class="c6">Moreover, <em class="c5">Lava</em> treats <em>all</em> kinds of persistent local or remote objects with &quot;external&quot; identifiers, that can be processed through interfaces, as component objects, for instance files, databases, local and FTP file systems, Web pages and mail-boxes, all kinds of objects that are managed by continuous system services. They are all made accessible through the same operations <strong>new</strong>, <a id="attach"></a><strong>attach</strong>, and possibly <strong>query interface</strong>, for processing through specific interfaces.</p>

  <p class="c6">E.g., Web pages may be processed through the interface(s) of a &quot;Document Object Model&quot; (DOM), files through read/write interfaces. <strong>Databases</strong> may be viewed as persistent sets of objects whose interfaces describe the data structure of these database objects. In the last case this requires, of course, an interface notion like that of <em class="c5">Lava</em>, that includes not only functions but also attributes, and that supports multiple inheritance (which is needed for CORBA).</p>

  <p class="c6"><img src="../images/ComponentDemo.png" align="left" border="1" 
          height="323" hspace="10" width="401" alt="img" id="compdemo" />The name space of type identifiers is specific to the respective kind of components. E.g., for Microsoft-COM components it is a 16 byte &quot;class ID&quot; (CLSID). The URLs of persistent objects have various formats. For Web pages they consist of the usual Internet URL (http://...), the URL of local files is their usual pathname, etc..</p>

  <p class="c6">The file menu of the <em class="c5">Lava</em> programming environment contains an <strong>import command</strong> for components. Given a concrete component of any kind, its purpose is to generate a <em class="c5">Lava</em> <strong><a id="COS"></a>component object specification</strong> for all types of component objects that are supported by that component. A component object specification is primarily a list of <strong><a id="COI"></a>component object interfaces</strong> that are supported by the respective component object.</p>

  <p class="c6"><em class="c5">Lava</em> will also support event handlers (callbacks, notifications) following the conventions of the respective component notion. They enable immediate reaction to events occurring within the component object, provided that the component supports such notifications.</p>

  <p class="c6"><strong class="c3">Lava</strong> will provide prefabricated component object specifications for various standard types of components (like file, http, ftp, mail) which will render explicit import operations superfluous in these cases.</p>

  <p class="c6">New component objects are created by a variant of the quite normal <strong class="c3">Lava</strong> <strong>new</strong> construct in the address space of the containing component. If a component object, for instance a persistent object, has already been created outside the <em class="c5">Lava</em> program then it can be attached to the <strong class="c3">Lava</strong> program by the <strong class="c3">Lava</strong> <strong>attach</strong> operation.</p>

  <p class="c6">The <strong>new</strong> and <strong>attach</strong> operations specify the <em class="c5">Lava</em> name of a component object specification and of an interface through that the object is to be processed. For persistent objects the respective URL is specified additionally. An object may have several interfaces, and a <strong>query interface</strong> operation allows you to navigate forth and back between these. (In this way, objects having many capabilities can be used by non-oo languages or by programming languages that support only single inheritance.)</p>

  <h3>Parameter passing between components</h3>

  <p>If you call a method of a component object and this call is directed across the border between address spaces or programming languages then you will be forced generally to pass complex parameter objects &quot;by value&quot;, i.e., they are <em>copied</em> to the target address space. Two questions arise in this context:</p>

  <ol>
    <li>
      <p class="c6">Is parameter passing &quot;by value&quot; indeed <em>semantically</em> admissible and meaningful in this concrete case?</p>
    </li>

    <li>
      <p class="c6">Which nested sub-objects of the parameter object are really <em>constituents,</em> and which of them are merely <em>acquaintances</em> of the object, that should be viewed as separate, independent objects and thus should not be passed &quot;by value&quot; together with the actual parameter object?</p>
    </li>
  </ol>

  <p class="c6">The answer to the first question will generally be &quot;no&quot; if the object is a <em>variable state object</em> with <em>uniqueness semantics</em>.</p>

  <p class="c6">For instance is the semantics of a bank account not preserved by parameter passing by value, cloning or copying, unless it has just the semantics of copying a <em>snapshot</em> of its current state. But the semantics of such a snapshot differs from that of the actual bank account.</p>

  <p class="c6">In contrast to this, copying a (signed and thereafter immutable) money transfer order is semantics-preserving, provided it doesn&#39;t cause the money transfer order to be executed twice.</p>

  <p class="c6">In <strong class="c3">Lava</strong> you can distinguish these <a href="TwoObjectCategories.htm">two object categories</a> explicitly: When declaring a variable you can specify whether the values of that variable are mutable <em>state objects</em> (with uniqueness semantics) or complex value objects that become immutable after they have been constructed completely (i.e., when they leave the <em class="c5">Lava</em> new construct); thereafter they may be copied/cloned/passed by value without restrictions. (For function parameters you may also specify that they should be of the same category as the call object of the function call. Local variables and function parameters, but not for member variables of classes, may also be of &quot;any category&quot; (in cases where their treatment doesn&#39;t depend on their category).</p>

  <p class="c6">LLikewise, you have to distinguish explicitly in <strong class="c3">Lava</strong> whether a member variable of some <strong class="c3">Lava</strong> class represents a <em>constituent</em> of the containing object, or else a <em>pointer</em> to a separate object (<em>acquaintance</em>).</p>

  <p class="c6">As a consequence of these explicit semantic distinctions, parameter passing by value, copying, cloning, and comparison of objects can be performed automatically in <strong class="c3">Lava</strong>, while in other languages the programmer has to resort to the manual programming of individual cases generally.</p>

  <p class="c6"><strong>Note</strong> that <strong class="c3">Lava</strong> provides high-level support of <a href="EditForm.htm">form-based user interfaces</a> that are generated in a semi-automatic way from <strong class="c3">Lava</strong> class declarations.</p>

  <h3 class="c7">See also</h3>

  <p class="c6"><strong><a href="ComponentSamples.htm">Component samples</a></strong>.</p>
</body>
</html>
