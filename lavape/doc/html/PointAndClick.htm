<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <title>Point and click</title>
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h3.c4 {font-weight: bold}
  a.c3 {font-weight: bold}
  strong.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
      .style2
      {
          color: #FF0000;
      }
  </style>
</head>

<body>
<h2 class="c1"><span class="style1">Lava</span> is perfectly
"point-and-click"</h2>

<p><span class="style2"><em><strong>Lava</strong></em></span> programs are no longer "written" but
"constructed" in Lego-like fashion from basic constructs, and this is true also
for the executable parts of <span class="style2"> <em><strong>Lava</strong></em></span> programs.</p>

<p>The <strong class="c2"><em>Lava</em></strong> programming environment (<span
class="style1"><strong>LavaPE</strong></span>) provides quite a number of
different views for editing and inspecting <span class="style2"> <em><strong>Lava</strong></em></span>
programs, but there are two dominating primary views, the "declaration view"
and the "exec view":</p>
<ul>
  <li>The <a class="c3" href="EditTree.htm">declaration view</a> is used for
    declaring various kinds of <strong class="c2">Lava</strong> entities, in
    particular new classes, implementations, and their respective
    sub-structures.<br />
  </li>
  <li><a id="exec"></a>The <a class="c3" href="EditExec.htm">exec view</a> is
    used to construct the executable portions ("<a
    href="EditExec.htm#exec">execs</a>") of <strong class="c2">Lava</strong>
    programs, i.e., 
    <ol>
      <li>the <strong>bodies</strong> of initiators (= main programs) and
        functions,</li>
      <li><a id="constraint"></a><strong><a href="DBC.htm">attached
        assertions</a></strong> (invariants attached to classes and
        implementations, pre- and postconditions attached to functions).</li>
    </ol>
  </li>
</ul>

<p>The <strong>declaration view</strong> is a "tree view" to which everybody is
accustomed, for instance, from the "Explorer" of Microsoft Windows. Tree
construction is controlled by tool buttons corresponding to the basic <strong
class="c2">Lava</strong> notions, like "new package", "new class", "new
implementation", "new member variable", "new member function", "new function
parameter", etc.. The properties of these entities are edited using appropriate
dialog boxes. Subtrees can be easily copied and moved by drag-and-drop
operations or expanded/collapsed by proper tool buttons.</p>

<p>There are several auxiliary tree views the most important of which is used
for specifying the details of an individual or collective <a
href="OverrideView.htm">class derivation</a> leading to a derived class or
pattern.</p>

<p><a href="EditTree.htm">Here</a> you can find more details about
point-and-click editing of the <strong class="c2">Lava</strong> declaration
view.</p>
<hr />

<p><a id="placeholder"></a>The <strong>exec view</strong> is a quite normal
textual representation of an "exec" or "invariant". But although it uses the
standard Windows "rich edit view", it is not editable directly as text. The
executable program text is rather constructed from a number of basic statement,
expression, and special constructs which typically would contain "placeholders"
<span class="style2">&lt;stm&gt;</span>, <span
class="style2">&lt;expr&gt;</span>, <span class="style2">&lt;var&gt;</span>,
<span class="style2">&lt;type&gt;</span>, <span
class="style2">&lt;func&gt;</span>, <span class="style2">&lt;set&gt;</span> ...
for statements, expressions, variable / type / function / set references ...
that may be inserted at these places.</p>

<p>In fact, <strong>there is no fixed textual syntax of</strong> <span
class="style1"><strong>Lava</strong></span> at all, nor is there a <span
class="style1"><strong>Lava</strong></span> parser or compiler. The point-and
click operations of the programmer generate / manipulate an internal tree
representation of the <span class="style1"><strong>Lava</strong></span> program
<em>directly</em>. The textual representation of execs / invariants is
generated on the fly as long as a corresponding view is open.</p>

<p><a href="EditExec.htm">Here</a> you can find more details about
point-and-click editing of the <strong class="c2">Lava</strong> exec view.</p>
<hr />

<p><a id="HTMLdoc"></a>For documentation and publishing purposes an HTML
representation of an entire <strong class="c2">Lava</strong> program can be <a
href="commands/GenHtmlCommand.htm">generated automatically</a>. This comprises
also the declaration parts of the program in some obvious but noncommittal
textual syntax. Except for this, <span
class="style1"><strong>Lava</strong></span> isn't a conventional textual
language, but it is inseparably connected with <strong
class="c2">LavaPE</strong>.</p>

<p>A particular highlight of this philosophy is the capability to generate a <a
href="EditForm.htm">default form representation</a> from a class declaration on
a single mouse-click, which can then be customized using the <span
class="style1"><strong>Lava</strong></span> UI builder.</p>

<h3 class="c4">See also</h3>

<p><a href="BasicEditing.htm">Basic editing procedures</a></p>

<p><a href="EditExec.htm">Editing executable code</a></p>

<p><a href="Refactoring.htm">Lava refactoring support</a></p>
</body>
</html>
