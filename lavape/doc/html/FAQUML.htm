<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>FAQ UML</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  i.c3 {font-weight: bold; color: Red}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {font-weight: bold; text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
  </style>
</head>

<body>
<!-- Start of StatCounter Code -->
<script type="text/javascript">
var sc_project=4259225; 
var sc_invisible=1; 
var sc_partition=46; 
var sc_click_stat=1; 
var sc_security="96a86569"; 
</script>

<script type="text/javascript"
src="http://www.statcounter.com/counter/counter_xhtml.js"></script><noscript><div
class="statcounter"><a title="wordpress com stats"
class="statcounter"
href="http://www.statcounter.com/wordpress.org/"><img
class="statcounter"
src="http://c.statcounter.com/4259225/0/96a86569/1/"
alt="wordpress com stats" /></a></div></noscript>
<!-- End of StatCounter Code -->

  <h2 class="c1">What about <span class="style1">Lava</span> and UML?</h2>

  <p>Because of the <b>incremental</b> and the uncompromising <b>point-and-click</b> style of <b class="c2">Lava</b> programming and because of the <b>ease of renaming and rearrangement</b> operations we believe that <b class="c2">Lava</b> may also be used already in the early (analysis and design) stages of application development, which seem to be dominated by UML tools presently.</p>

  <p>E.g., the typical UML use case &quot;customer opens new bank account&quot; could also be described by three <b class="c2">Lava</b> classes <i>Bank</i>, <i>Customer</i>, <i>Account</i>, and a method <i>openAccount</i> of <i>Bank</i>, whose declarations could be established in the twinkling of an eye by just a few point-and-click operations. In this stage, the classes would not yet have any attributes or methods, except for <i>Bank</i>, which would have a method <i>openAccount</i>, but the latter would not yet have any formal parameters.</p>

  <p>The main advantage of using <b class="c2">Lava</b> from the beginning is that you can fill in ever more details in a quite incremental way just as they come into your mind. For instance, if you recognize that <i>openAccount</i> should have an input parameter of type <i>Customer</i> and an output parameter of type <i>Account</i> then you can add these details easily and immediately in <b class="c2">Lava</b>, while in UML you would be forced to first translate your use cases into a class diagram before you can specify method parameters.</p>

  <p>Another recognition is that graphical representations would tend to grow very soon beyond the margins of a sheet of paper or a screen, thus compromising ease of understanding and editing.</p>

  <p>So our conclusion and our present working hypothesis is that you should have a single, compact, primary language like <b class="c2">Lava</b> that supports seamless, consistent, incremental development from analysis over design up to implementation.</p>

  <p>Without any doubt, you would like to produce additional graphic representations of selected, particular aspects of your system or application in various ways.</p>

  <p>The second part of our working hypothesis now is that these additional graphical (or other) representations should be produced in an automatic or semi-automatic way from the complete and more compact primary representation as a <b class="c2">Lava</b> program, just like many existing programming environments are already able to produce class diagrams or call graphs from source code. As a by-product, this would also make it easy to keep these derived secondary, for instance graphic, representations consistent with your primary code at all times.</p>

  <p>The <b><a href="FAQWhoTakeLook.htm#AST">AST-nature</a></b> of the internal representation of <i class="c3">Lava</i> programs should greatly facilitate the generation of such derived, secondary representations of <b class="c2">Lava</b> programs, and these would be very welcome supplements to the existing <b class="c2">Lava</b> programming environment.</p>

  <h3>See also</h3>

  <p><a href="FAQContributions.htm"><b>How can I contribute to the</b> <i class="c3">Lava</i> <b>development?</b></a></p>

  <p><a href="FAQWhoTakeLook.htm#AST"><b>Who might be interested in</b> <i class="c3">Lava</i><b>?</b></a></p>
</body>
</html>
