<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>FAQ UML</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  em.c3 {font-weight: bold; color: Red}
  strong.c2 {font-style: italic; color: Red}
  h2.c1 {font-weight: bold; text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
  </style>
</head>

<body>
  <h2 class="c1">What about <span class="style1">Lava</span> and UML?</h2>

  <p>Because of the <strong>incremental</strong> and the uncompromising <strong>point-and-click</strong> style of <strong class="c2">Lava</strong> programming and because of the <strong>ease of renaming and rearrangement</strong> operations we believe that <strong class="c2">Lava</strong> may also be used already in the early (analysis and design) stages of application development, which seem to be dominated by UML tools presently.</p>

  <p>E.g., the typical UML use case &quot;customer opens new bank account&quot; could also be described by three <strong class="c2">Lava</strong> classes <em>Bank</em>, <em>Customer</em>, <em>Account</em>, and a method <em>openAccount</em> of <em>Bank</em>, whose declarations could be established in the twinkling of an eye by just a few point-and-click operations. In this stage, the classes would not yet have any attributes or methods, except for <em>Bank</em>, which would have a method <em>openAccount</em>, but the latter would not yet have any formal parameters.</p>

  <p>The main advantage of using <strong class="c2">Lava</strong> from the beginning is that you can fill in ever more details in a quite incremental way just as they come into your mind. For instance, if you recognize that <em>openAccount</em> should have an input parameter of type <em>Customer</em> and an output parameter of type <em>Account</em> then you can add these details easily and immediately in <strong class="c2">Lava</strong>, while in UML you would be forced to first translate your use cases into a class diagram before you can specify method parameters.</p>

  <p>Another recognition is that graphical representations would tend to grow very soon beyond the margins of a sheet of paper or a screen, thus compromising ease of understanding and editing.</p>

  <p>So our conclusion and our present working hypothesis is that you should have a single, compact, primary language like <strong class="c2">Lava</strong> that supports seamless, consistent, incremental development from analysis over design up to implementation.</p>

  <p>Without any doubt, you would like to produce additional graphic representations of selected, particular aspects of your system or application in various ways.</p>

  <p>The second part of our working hypothesis now is that these additional graphical (or other) representations should be produced in an automatic or semi-automatic way from the complete and more compact primary representation as a <strong class="c2">Lava</strong> program, just like many existing programming environments are already able to produce class diagrams or call graphs from source code. As a by-product, this would also make it easy to keep these derived secondary, for instance graphic, representations consistent with your primary code at all times.</p>

  <p>The <strong><a href="FAQWhoTakeLook.htm#AST">AST-nature</a></strong> of the internal representation of <em class="c3">Lava</em> programs should greatly facilitate the generation of such derived, secondary representations of <strong class="c2">Lava</strong> programs, and these would be very welcome supplements to the existing <strong class="c2">Lava</strong> programming environment.</p>

  <h3>See also</h3>

  <p><a href="FAQContributions.htm"><strong>How can I contribute to the</strong> <em class="c3">Lava</em> <strong>development?</strong></a></p>

  <p><a href="FAQWhoTakeLook.htm#AST"><strong>Who might be interested in</strong> <em class="c3">Lava</em><strong>?</strong></a></p>
</body>
</html>
