<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Recursion samples</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link href="LavaStyles.css" type="text/css" rel="STYLESHEET" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  i.c4 {font-weight: bold; color: Red}
  h3.c3 {font-weight: bold}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
  </style>
</head>

<body>
  <h2 class="c1">Recursion samples</h2>

  <h3>Sample files</h3>

  <p>Please open <b>Fibonacci.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>Please open <b>FiboTailRecursion.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>Please open <b>Factorial.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>Please open <b>FacTailRecursion.lava</b> in <b class="c2">LavaPE</b>.</p>

  <h3>Topics</h3>

  <p>Recursive functions as a substitute for <a href="Unsolved.htm#loops">sequential loops</a>. See also the <a href="RepetComputSamples.htm">introduction</a> to our repetitive computation samples.</p>

  <h3>Overview</h3>

  <p>If you are accustomed to sequential loops, as most of us, it is quite straightforward, nevertheless, to switch to recursive functions, since sequential loops can be easily transformed into &quot;<a target="_blank" href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm#ToTailRecursive">tail recursion</a>&quot; (and vice versa).</p>

  <p>A recursive function is said to be tail recursive if there are no pending operations to be performed on return from a recursive call, or in other words: A tail recursive function returns the value of the last recursive call as the value of the function. See <a target="_blank" href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm">here</a> for general background information on direct, indirect, linear, tail and tree recursion.</p>

  <p><strong>A tail-recursive invocation of the current function can be viewed as a &quot;continue&quot; operation which returns control to the beginning of the loop that is represented by the recursive function.</strong></p>

  <p>The difference (and advantage), compared to conventional loops, is that you explicitly pass parameters to the recursive function. In this way you point out quite clearly which variables are involved in the repetitive computation.</p>

  <h3>Where to look and what to do</h3>

  <p><b>Fibonacci:</b><br />
  <br />
  The Fibonacci sample is a typical <a target="_blank" href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm">tree recursion</a> sample which clearly exhibits the rule that generates the Finonacci numbers but which, on the other hand, is very inefficient for computing these. Run the sample program.</p>

  <p><b>FiboTailRecursion:</b><br />
  <br />
  Its tail recursion counterpart is much more efficient as you can also see if you run both samples: The tree recursion algorithm takes a quite sensible amount of time to compute Fibonacci(25). Run the sample program.</p>

  <p><b>Factorial:</b><br />
  <br />
  The factorial sample illustrates linear recursion: The recursive call occurs within an arithmetic expression, while with</p>

  <p><b>FacTailRecursion:</b><br />
  <br />
  <a target="_blank" href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm#ToTailRecursive">tail recursion</a> the result of the recursive call is returned to the caller without further processing. Run both sample programs.</p>

  <h3 class="c3">Summary</h3>

  <p>Traditional loops are replaced by tail recursion in <i class="c4">Lava</i>. The input parameters of the tail-recursive replacement function <i>f</i> represent the variables that are changed by the loop. They are assigned new values on every recursive invocation of <i>f</i>. Every such recursive invocation of <i>f</i> corresponds to a jump to the beginning of the traditional loop.</p>

  <p>Single-assignment and absence of loops cause the data flow in <i class="c4">Lava</i> programs to be directed strictly from top to bottom and enable complete initialization checks for variables.</p>

  <h3>See also</h3>

  <p>See the <a target="_blank" href="http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/">&quot;Fibonacci Home Page&quot;</a> for pleasantly entertaining as well as serious background information on Fibonacci numbers.</p>
</body>
</html>
