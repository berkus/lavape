<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<TITLE>Recursion samples</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<LINK href="LavaStyles.css" 
type=text/css rel=STYLESHEET></HEAD>
<BODY>
<H2 align=center>Recursion samples</H2>
<H3>Sample files</H3>
<p>Please open <b>Fibonacci.lava</b> in
<font color="#FF0000"><b><i>LavaPE</i></b></font>.</p>
<p>Please open <b>FiboTailRecursion.lava</b> in
<font color="#FF0000"><b><i>LavaPE</i></b></font>.</p>
<p>Please open <b>Factorial.lava</b> in
<font color="#FF0000"><b><i>LavaPE</i></b></font>.</p>
<p>Please open <b>FacTailRecursion.lava</b> in
<font color="#FF0000"><b><i>LavaPE</i></b></font>.</p>
<H3>Topics</H3>
<P>Recursive functions as a substitute for <A 
href="Unsolved.htm#loops">sequential loops</A>. See also the
<a href="RepetComputSamples.htm">introduction</a> to our repetitive computation 
samples.</P>
<H3>Overview</H3>
<P>If you are accustomed to sequential loops, as most of us, it is quite 
straightforward, nevertheless, to switch to recursive functions, since 
sequential loops can be easily transformed into &quot;<a target=_blank href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm#ToTailRecursive">tail recursion</a>&quot; (and vice 
versa).  </P>
<P>A recursive function is said to be tail recursive if there are no 
pending operations to be performed on return from a recursive call, or in other words:
A tail recursive function returns 
the value of the last recursive call as the value of the function.
See
<a target=_blank href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm">
here</a> or
<a target="_blank" href="http://www.csee.umbc.edu/~edelman/202/sp98/readings/recursion.html">here</a> for general background information on direct, indirect,
linear, 
tail and tree recursion.</P>
<P><STRONG>A tail-recursive invocation of the current function can be viewed as 
a "continue" operation which returns control&nbsp;to the beginning of the loop 
that is represented by the recursive function.</STRONG></P>
<P>The difference (and advantage), compared to conventional 
loops, is that you explicitly pass parameters to the recursive function. In this 
way you point out quite clearly which variables are involved in the repetitive computation.</P>
<H3>Where to look and what to do</H3>
<p>
<span lang="de"><b>Fibonacci:</b><br>
</span>
<br>
The Fibonacci sample is a typical
<a target=_blank href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm">
tree recursion</a> sample which clearly exhibits the rule that generates the 
Finonacci numbers but which, on the other hand, is very inefficient for 
computing these. Run the sample program.</p>
<p>
<span lang="de"><b>FiboTailRecursion:</b><br>
</span>
<br>
Its tail recursion counterpart is much more efficient as you can also see if you 
run both samples: The tree recursion algorithm takes a quite sensible amount of 
time to compute Fibonacci(25). Run the sample program.</p>
<p>
<span lang="de"><b>Factorial:</b><br>
</span>
<br>
The factorial sample illustrates linear recursion: The recursive call occurs 
within an arithmetic expression, while with</p>
<p>
<span lang="de"><b>FacTailRecursion:</b><br>
</span>
<br>
<a target=_blank href="http://triton.towson.edu/~akayabas/COSC455_Spring2000/Recursion_Iteration.htm#ToTailRecursive">
tail recursion</a> the result of the recursive call is returned to the caller 
without further processing. Run both sample programs.</p>
<h3>
<b>Summary</b></h3>
<p>
Traditional loops are replaced by tail recursion in <font color="#FF0000"><i><b>
Lava</b></i></font>. The input parameters of the tail-recursive replacement 
function <i>f</i> represent the variables that are changed by the loop. They are 
assigned new values on every recursive invocation of <i>f</i>. Every such 
recursive invocation of <i>f</i> corresponds to a jump to the beginning of the 
traditional loop. </p>
<p>
Single-assignment and absence of loops cause the 
data flow in <i><font color="#FF0000"><b>Lava</b></font></i> programs to be directed 
strictly from top to bottom and enable complete initialization checks for 
variables. </p>
<h3>See also</h3>
<p>
See the
<a target=_blank href="http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/">&quot;Fibonacci 
Home Page&quot;</a> for pleasantly entertaining as well as 
serious background information on  Fibonacci numbers. </p>

</BODY></HTML>