<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Unfinished objects</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  strong.c3 {font-style: italic; color: Red}
  em.c2 {font-weight: bold; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
  </style>
</head>

<body>
  <h2 class="c1"><strong>Unfinished/closed/opaque/quarantined objects</strong></h2>

  <p>Assume you want to initialize two objects <em>a</em> and <em>b</em> that point to each other. Then you cannot completely initialize <em>a</em> before creating <em>b,</em> of course, and vice versa.</p>

  <p>Other object-oriented languages, like <em class="c2">C++</em> or <em class="c2">Java</em>, solve this problem simply by forgoing a complete initialization discipline:</p>

  <p>A <em class="c2">C++</em> or <em class="c2">Java</em> constructor need not fully initialize a new object. Rather, initialization of an object may be scattered over large parts and various stages of an application run in these languages. These long-distance dependencies will make it rather confusing and unclear frequently, in which state of initialization an object is at a certain point in a program and thereby increases the danger of inadvertent access to not yet initialized members considerably.</p>

  <p>We consider this <strong>absence of a stringent and statically checked initialization discipline</strong> as a major source of run time errors and as a serious obstacle on the way to more comprehensible and maintainable programs. The latter goals can be reached only if we strictly <strong>avoid long-distance effects and dependencies</strong> and strive for more <strong>&quot;locally comprehensible&quot; programs</strong>.</p>

  <p>In <em class="c2">Lava</em>, the basic idea on how to solve the problem of improper use of still unfinished objects is to provide a specific attribute <strong>&quot;closed&quot;</strong> that can be added to the declaration of a local variable, formal parameter and <em>self</em> object of methods, and to disallow all references to the members of &quot;closed&quot; objects: &quot;Closed&quot; objects are in this sense <strong>&quot;opaque&quot;</strong> or <strong>&quot;quarantined&quot;</strong>. (<a id="closed"></a>Use the <img src="../images/Closed.png" border="0" height="15" width="16" alt="img" /> tool button on the &quot;Exec switches toolbar&quot; to declare a local variable &quot;closed&quot;.)</p>

  <p>Furthermore, <em class="c2">LavaPE</em> restricts and controls the propagation of such unfinished objects at programming time in order to make completely clear which objects might be infected (possibly deeply nested in their internal structure) at any place in a program with &quot;the bacillus of incomplete initialization&quot; and will be treated as closed/opaque/quarantined in their entirety therefore:</p>

  <ul>
    <li>The actual origin of unfinished objects are the <em>self</em> objects in <a href="ObjectLifeCycle.htm#creation">initializers</a>. At any point in the <a href="EditExec.htm#exec">exec</a>(=body) of an initializer <strong class="c3">LavaPE</strong> <a href="IniChecks.htm">knows</a> whether values have already been assigned to <strong>all</strong> mandatory members of <em>self</em> at this point. At places in the <a href="ObjectLifeCycle.htm#creation">initializer&#39;s</a> <a href="EditExec.htm#exec">exec</a> where this condition is not yet fulfilled, <em>self</em> is treated as &quot;closed&quot; in the above sense. Even at places where the object has already been completely initialized we may be forced to treat the object as closed, namely if potentially unfinished objects are passed to this initializer through closed input parameters, since they may have &quot;infected&quot; the <em>self</em> object.</li>

    <li>Any object that is already known as a potentially unfinished object can be propagated in the following ways (but, of course, only if the target has also been declared &quot;closed&quot;):

      <ol>
        <li>Within an initializer you can assign closed objects to (direct, top-level) members of the <em>self</em> object.</li>

        <li>You can assign a closed object to a non-top-level member of <em>self</em> or to a (possibly nested) member of any other object <em>x</em> if <em>self</em> or <em>x</em>, respectively, has been declared &quot;closed&quot; explicitly. (Note, however, that such an assignment is possible only if the receiving parent object is a <a href="TwoObjectCategories.htm">state object</a>.)</li>

        <li>You can assign closed objects to closed local variables and output parameters of the current <a href="EditExec.htm#exec">exec</a>.</li>

        <li>You can use a closed object as an (actual) input parameter to a method invocation if the corresponding formal input parameter has been declared &quot;closed&quot;.</li>

        <li>You can use a closed object <em>x</em> to call a method <em>m</em>: <em><br /></em> 
            <span class="style1">call</span> x.m(...),<br />
        provided the <em>self</em> object of <em>m</em> has been <a href="dialogs/FunctionBox.htm#selfClosed">declared &quot;closed</a>&quot;.</li>
      </ol>
    </li>
  </ul>

  <p>These rules guarantee that unfinished objects are recognized as such and propagated only to &quot;closed&quot; variables, and their members can never be referenced.</p>
  <hr />

  <p><strong>Note 1:</strong> A <a href="ObjectLifeCycle.htm#creation">newly created</a> object is always guaranteed to be completely finished 
      unless you pass a closed object as an actual input parameter to the object&#39;s initializer 
      and insert it anywhere in the new object.</p>

  <p>Or loosely speaking: Incompleteness can be propagated in upward direction in the programs call stack only if it has been passed downward before.</p>

  <p><strong>Note 2:</strong> For the sake of simplicity the &quot;closed&quot; attribute cannot be assigned to individual member variables of <em class="c2">Lava</em> classes but only to local variables, function parameters and the <em>self</em> variable of functions.</p>

  <p><strong>Note 3:</strong> All combinations of the mandatory/optional and closed/non-closed attributes are possible for <a href="#closed">local variables</a> and <a href="dialogs/FuncParmBox.htm#closed">function parameters</a>.</p>

  <p><strong>Note 4:</strong> If a <em class="c2">Lava</em> class A is derived from certain base classes then every initializer of A calls a base class initializer for every base class before initializing its &quot;own&quot; member variables. So, when the base class initializers are called, the <em>self</em> variable of A is still unfinished, and therefore the respective base class initializers may be invoked only if their attribute &quot;self is closed&quot; is set to <em>true</em>. (This is the default for the automatically generated default initializer of a <em class="c2">Lava</em> class.)</p>

  <h3>See also</h3>

  <p><a href="IniChecks.htm">Complete initialization checks</a></p>

  <p><strong><a href="MultiPhaseRecIni.htm">Multi-phase and recursive initialization</a></strong></p>
</body>
</html>
