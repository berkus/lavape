<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Declaration, creation, lifetime of objects</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c7 {font-weight: bold; text-align: left}
  h3.c6 {font-weight: bold; text-align: left}
  a.c5 {font-weight: bold}
  i.c4 {font-weight: bold; color: Red}
  p.c3 {text-align: left}
  h2.c2 {text-align: center}
  b.c1 {font-style: italic; color: Red}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
      .style2
      {
          color: #0000FF;
      }
      .style3
      {
          color: #CC00CC;
          font-weight: bold;
      }
  </style>
</head>

<body>
  <h2 class="c2"><strong class="c1">Lava</strong> variables,<br />
  stages in the life of a <strong class="c1">Lava</strong> object</h2>

  <h3><a id="dclCreation"></a>Declaration of variables</h3>

  <p>In addition to literal constants, like &quot;3&quot;, a programming language needs &quot;variables&quot; to which you can assign values, like</p>
  <pre xml:space="preserve">
pi  <span class="style1">&lt;==</span>  3.14
</pre>

  <p>In <strong class="c1">Lava</strong> variables may be declared</p>

  <ol>
    <li>as member variables of classes or implementations using the <a href="EditTree.htm">declaration view</a> of <strong class="c1">LavaPE</strong>,</li>

    <li>as input or output parameters of functions or initiators using the <a href="EditTree.htm">declaration view</a> of <strong class="c1">LavaPE</strong>,</li>

    <li>as &quot;unbounded&quot; local variables in execs or invariants using the 
        <span class="style1">declare</span> construct in the <a href="EditExec.htm">exec view</a> of <strong class="c1">LavaPE</strong>,</li>

    <li>as &quot;unbounded&quot; local variables in <span class="style1">type</span><span 
            class="style2"> ... <strong>case</strong></span> branching statements in execs or invariants,</li>

    <li>as &quot;bounded&quot; local variables ranging over some finite set of objects, using &quot;quantifiers&quot; 
        <span class="style1">foreach</span>, <span class="style1">exists</span>, 
        <span class="style1">select</span> in the <a href="EditExec.htm">exec view</a> of <strong class="c1">LavaPE</strong>,</li>

    <li>automatically as auxiliary variables &quot;<em>temp...</em>&quot; in the 
        <span class="style1">new</span> and <span class="style1">clone</span> object creation constructs.</li>
  </ol>

  <p class="c3">In <strong class="c1">Lava</strong> you have to declare the <strong>type</strong> (for instance &quot;Integer&quot;) and the <strong>object category</strong> (<a href="TwoObjectCategories.htm">state or value object</a>) of variables. The type must be either a concrete class or a <a href="PatternsFrameworks.htm">&quot;virtual type&quot;</a> which has been declared as a &quot;type parameter&quot; of a containing class or package. If the type of a variable is virtual then this virtual type (or one of its ancestors in the inheritance path) may be declared responsible for the determination of the object category.</p>

  <p class="c3">A tilde &quot;~&quot; precedes the class name in the declaration of state objects and this way indicates that new values may be assigned to their immediate member variables again and again.</p>

  <h3><a id="creation"></a>Creation, initialization, completion of <strong class="c1">Lava</strong> objects</h3>

  <p>A concrete object may be created and assigned to <em>acc</em> using the <strong>new</strong> expression of <em><strong>Lava</strong></em>:</p>
  <pre xml:space="preserve">
acc <span class="style2"><strong>&lt;== </strong><strong>new</strong></span> ~Account temp
          <em>initialization of the new account</em>:
          temp.<strong>accountInit</strong>(i1,i2,...)
        <span class="style1">but</span>
<em>          customization of the new account:
</em>          temp.balance <span class="style1">&lt;==</span> 1000.00;
          ...
        <span class="style2">#new</span>
</pre>

  <p>Thereafter <em>acc</em> will point to a newly created state object of type &quot;Account&quot;.</p>

  <p>Note that <span class="style1">new ... #new</span> is an expression in <strong class="c1">Lava</strong> that may occur in any place where expressions are appropriate, not only on the right side of assignments. Therefore it provides an auxiliary variable <em>temp</em> as a reference to the newly created object in the <strong>initializer</strong> call and in the 
      <span class="style3">but</span> customization clause.</p>

  <p><strong class="c1">Lava</strong> demands a more strict separation of the initialization, customization, and usage phases of objects than most other languages. We believe that it is at least worth an experiment to enforce more discipline and to prevent overly chaotic program structures concerning these aspects.</p>

  <p><strong>Initialization</strong> belongs to the duties of a <strong>class provider</strong>. Its purpose is to bring a new object into a state where all its non-optional member variables have admissible values such that the methods of the class may be safely applied to the new object.</p>

  <p><strong>Customization</strong> (in the <span class="style3">but</span> clauses of 
      <span class="style1">new</span> and <span class="style1">clone</span> expressions) gives the <strong>class client</strong> an opportunity to modify the initialized new object in a client-specific way in cases where the initilizers offered by the class provider do not completely meet the client&#39;s requirements.</p>

  <p>Here a summary of the pertinent <strong class="c1">Lava</strong> rules:</p>

  <ol>
    <li><a id="initializer"></a>Every <strong class="c1">Lava</strong> class must have at least one <strong>&quot;initializer&quot;</strong> function (roughly corresponding to a <strong>constructor</strong> in <strong class="c1">C++</strong> or <strong class="c1">Java</strong>). You must always specify an <em>initializer</em> (rather than a creatable class) for the 
        <span class="style1">new</span> expression.</li>

    <li>A class may have a <strong>&quot;default initializer&quot;</strong> without parameters (which will then be omitted from the new expression).</li>

    <li>Initializers must first call an initializer for every base class of their associated class</li>

    <li>and must then explicitly assign a value to every non-optional member of the class</li>

    <li>before they may apply other member functions of their class to their <em>self</em> object.</li>

    <li>A new object may be passed as a parameter to a function or initiator only after it has left this entire construction hoarding &quot;<span 
            class="style1">new</span><span class="style2"> ... <strong>#new</strong></span>&quot; or &quot;<span 
            class="style1">clone</span><span class="style2"> ... <strong>#clone</strong></span>&quot; and thus counts as complete.</li>

    <li>Value objects must not be changed any more after completion.</li>
  </ol>

  <p><strong><a id="newVT"></a>&quot;<span class="style2">new</span> &lt;virtual_type&gt;&quot;?:</strong> <em class="c4">Lava</em> doesn&#39;t support the creation of objects whose type is specified as a virtual type. The reason is that a specific initializer is needed on object creation in any case, and initializers are no virtual functions but inseparably associated with a quite specific class. We could at best look for a (parameterless) default initializer (see point 2 above) at run time when the real type is known that corresponds to the specified virtual type. This would represent a kind of virtualization of initializers that we felt to be rather unnatural and arbitrary. Instead, we recommend to resort to the quite usual solution of providing &quot;factory classes&quot; and the usual (virtual) &quot;factory functions&quot; for creating such objects whose real type is only known at run time.</p>

  <p><strong>See also</strong> <a class="c5" href="SepItfImpl.htm#objectCreation">object creation</a>.</p>

  <h3>Lifetime of <strong class="c1">Lava</strong> objects</h3>

  <p>Roughly speaking, a <strong class="c1">Lava</strong> object may be deleted and the storage allocated to it may be freed when the object is no longer referenced by any <strong class="c1">Lava</strong> variable of any kind: Storage management for <strong class="c1">Lava</strong> objects is based on <a href="PointersRefCounts.htm">reference counts</a>.</p>

  <p>Persistent objects are realized as <a href="Components.htm">persistent component objects</a> in <strong class="c1">Lava</strong>.</p>

  <h3>Assignment and parameter passing</h3>

  <p>Assignment of a value (= result of an expression: an object) to a variable means always that the variable is made to point to this object. Parameter passing is viewed as a special case: The value is assigned to a formal input or output parameter of a function or initiator.</p>

  <p>Two variables may have the same value, i.e., point to the same object. The reference count of an object is incremented by 1 when the object is assigned to a variable or passed as an input parameter to a function/operator or initiator. It is decremented by 1 if program execution leaves the scope of a variable that points to the object.</p>

  <h3 class="c6">See also</h3>

  <p class="c7"><a href="IniChecks.htm">Comprehensive initialization checks</a></p>

  <p class="c3"><a class="c5" href="SingleAssigLogSem.htm">S</a><strong><a href="SingleAssigLogSem.htm">ingle-assignment</a></strong></p>

  <p class="c7"><a href="PointersRefCounts.htm#finalize">Finalizers/destructors</a></p>
</body>
</html>
