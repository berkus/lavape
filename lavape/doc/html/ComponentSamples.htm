<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Component sample</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h4.c4 {font-weight: bold}
  i.c3 {font-weight: bold; color: Red}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
      }
  </style>
</head>

<body>
  <h2 class="c1">Creating / attaching / using component objects</h2>

  <h3>Sample files</h3>

  <p>Please open <b>ComponentIntro.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>Please open <b>AttachDemo.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>Please open <b>AttachDemo.ldoc</b> in <b class="c2">Lava</b>.</p>

  <p>Please open <b>StreamSample.lava</b> in <b class="c2">LavaPE</b> and <b class="c2">Lava</b>.</p>

  <h3>Topics</h3>

  <p><b class="c2"><a href="Components.htm" style="color: #FF0000">Lava</a></b> <a href="Components.htm">component support</a>: Using <i>external</i> (transient or persistent, 
      <span class="style1"> <i class="c3">Lava</i></span> or &quot;foreign&quot;) data objects.</p>

  <h3>Overview</h3>

  <h4>Creating/attaching component objects</h4>

  <p>From the <i class="c3">Lava</i> perspective, component objects are &quot;external&quot; objects that are identified by external &quot;component object identifiers&quot; (COID). The COID is specified as part of a &quot;component object specification&quot; (COS), which also comprises a list of all &quot;component object interfaces&quot; that are supported by the component object.</p>

  <p>You can use the <i class="c3">Lava</i> <b>new</b> and <b>attach</b> expressions to create a new or access an existing component object. You have to specify 1. a COS in these expressions, 2. a component object interface that you want to open, and 3., if the respective object is persistent, you have to specify a <b>url</b> which identifies the location of the object within the respective component namespace. The latter depends on the component protocol (LAVA, .NET, CORBA, EJB, FILE, HTTP, FTP, MAIL, ...) of the object. The respective component implementation is found on the basis of the external COID in a way that depends on the respective component protocol.</p>

  <p>If a component object supports more than one component object interface then you can navigate between these, using the <b>query interface</b> expression to get any further interface from a given one.</p>

  <p>The first sample (<i>ComponentIntro.lava</i>) presents an outline of what is envisaged by this <i class="c3">Lava</i> component concept.</p>

  <h4>Persistent <i>Lava</i> objects</h4>

  <p>If you want to make a <i class="c3">Lava</i> object persistent you have to implement it within a <i class="c3">Lava</i> <b>component</b> (file name suffix .lcom instead of .lava):</p>

  <p>Use &quot;New component&quot; from the file menu of <i class="c3">LavaPE</i> to create a new <i class="c3">Lava</i> component file. This file will typically include some other files which in turn contain <i class="c3">Lava</i> <a href="Components.htm">component object specifications</a>.</p>

  <p>Click the button &quot;New component object implementation&quot; to create a new component object implementation. The associated dialog box provides a list of all component object specifications that are visible at this place. Select one of these. A &quot;component assembly interface&quot; having this same name is created below the <i>declarations</i> node of the component object implementation.</p>

  <p>This interface extends all interfaces that are supported by the underlying component object specification, and the actual component object implementation now is essentially a quite normal <b class="c2">Lava</b> implementation of this component assembly interface. This in turn amounts to implementing the individual component object interfaces that are supported by the underlying component object specification.</p>

  <p>A <b class="c2">Lava</b> program can create or attach such an external <i class="c3">Lava</i> object as described above, and it can change its state (if it is a state object). The modified state is saved automatically when the object&#39;s reference count goes down to zero. (You may invoke Object::DontSave on the object if you don&#39;t want to save it.)</p>

  <p>The state of a (new or modified) <i class="c3">Lava</i> component object is stored in a file having a file name suffix &quot;.ldoc&quot;. This file contains a pointer to the underlying *.lcom component implementation file. Many such *.ldoc &quot;<i class="c3">Lava</i> document files&quot; may use the same *.lcom component implementation, just like many MS Word documents may use the same Word program. In order to avoid the dependency of the *.ldoc&#39;s from the absolute pathnames of the *.lcom files, you can &quot;register&quot; the latter in a fixed place: You can place a link to it (i.e., a quite normal Windows *.lnk file) in the &quot;Components&quot; subdirectory of the <i class="c3">Lava</i> installation directory.</p>

  <p>Either the absolute pathname or the name of this link file may be specified as the COID (component object identifier) of the component object in its COS (component object specification).</p>

  <p>A <b class="c2">Lava</b> component object may also be associated with a <a href="EditForm.htm">form representation</a>. In this case, when you double-click an *.lcom file in the Windows Explorer, then the <b class="c2">Lava</b> object is activated and the corresponding form is displayed; you can fill it in, and if you close this application it may be stored as a *.ldoc file. If you double-click a *.ldoc file then it is opened and displayed again and you can modify the fields of the form and save it again.</p>

  <p><i class="c3">Lava</i> *.ldoc document objects may be processed both by the <b>attach</b> mechanism and via the forms-oriented user interface (if the latter exists), but presently not at the same time.</p>

  <h4 class="c4"><a id="OLEinPlaceActivation"></a>Close integration of component objects</h4>

  <p><b class="c2">Lava</b> .lcom/.ldoc document objects that have a user interface may also be embedded into OLE container applications, e.g., into a MS Word or Excel document. See the <i>LavaEmbeddedInWord.doc</i> sample below. I.e., these objects always support OLE in-place activation/editing without any further provisions.</p>

  <h3>Where to look and what to do</h3>

  <p>Please open <b>ComponentIntro.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>This minimalistic sample presents a raw impression of what the <i class="c3">Lava</i> component concept envisages.</p>

  <p>Please open <b>AttachDemo.lava</b> in <b class="c2">LavaPE</b>.</p>

  <p>The initiator of <i>AttachDemo.lava</i> uses <b>attach</b> to open the <i class="c3">Lava</i> document file <i>AttachDemo.ldoc</i>. The (state object) <i>sAttach</i> of type <i>LavaCompoIF</i> is then presented to the user by calling the <i>Edit</i> method of the GUI service that has been associated with class <i>LavaCompoIF</i>. You can then modify the content of this object and click the OK button to terminate the form editing process. Finally the object is saved automatically, when its reference count becomes zero on program termination.</p>

  <p>Subsequently you may double-click the <i class="c3">Lava</i> document file <b class="c2">AttachDemo.ldoc</b> to which the <b class="c2">Lava</b> document object has been saved in the preceding step. You will see your modifications and may now apply further modifications, this time directly through the GUI service CompoForm contained in the component object implementation in file <i>LCompoImpl.lcom</i>. You can save these new modifications and use the <i>Close</i> command from the file menu to close the <i class="c3">Lava</i> document.</p>
</body>
</html>
