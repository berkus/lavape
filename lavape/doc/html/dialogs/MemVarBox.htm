<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Member variable property sheet</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link href="../LavaStyles.css" type="text/css" rel="STYLESHEET" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c5 {text-align: left}
  a.c4 {font-weight: bold}
  p.c3 {font-weight: bold}
  i.c2 {font-weight: bold; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
      .style2
      {
          color: #FF0000;
          font-style: italic;
          font-weight: bold;
      }
      .style3
      {
          color: #FF0000;
          font-style: italic;
      }
  </style>
</head>

<body>
  <h2 class="c1">Member variable property sheet</h2>

  <h3>Name</h3>

  <p>The name of a function parameter may contain only letters, digits, and &quot;_&quot;. The first character must not be a digit.</p>

  <h3>Enable renaming</h3>

  <p>You may change the names of functions, member variables and virtual types when you override them in a derived class or pattern (for instance in order to resolve name collisions in cases of multiple inheritance). They inherit the names of the base versions by default (and their name is changed accordingly if the inherited base name is changed). Check this check-box if you would like to assign a different name (which will not be changed then if the base name is changed).</p>

  <h3>Substitutable type</h3>

  <p>Indicates whether the type of this member variable shall be <a href="../TypeSafety.htm#substitutableType">substitutable</a>, i.e., whether the type of a corresponding actual parameter may also be <a href="../TypeSafety.htm#p-derived">p-derived</a> (rather than <a href="../TypeSafety.htm#c-derived">c-derived</a>) from this formal parameter type. (Cf. the <em><a href="../PatternSamples.htm">ModelManyViews</a></em> and <em><a href="../PatternSamples.htm">CarMeeting</a></em> samples.)</p>

  <h3>Remove overrides</h3>

  <p>Transforms an overridden member variable into a non-overridden one, as if it had been newly declared in the containing class.</p>

  <h3>Select type of member variable</h3>

  <p>The type of the member variable may be selected from the combo-boxes &quot;Basic types&quot; and &quot;Other types&quot;. &quot;Basic types&quot; lists all classes whose declaration is contained in the basic include file I&gt;std.lava. If you don&#39;t explicitly select a type for a new member variable then its type will be <em>String</em>.</p>

  <h3>Kind of reference</h3>

  <p>This attribute enables us to distinguish <a href="../PointersRefCounts.htm#refTypes">three kinds of references</a> to other objects: <em>Constituents</em>, <em>acquaintances</em>, and <em>reverse</em> (back or up) links. Constituents <em>belong</em> to the current object, acquaintances are <em>pointers to independent objects</em>, and reverse links are <em>auxiliary</em> back or up pointers that are required to facilitate automatic storage management by reference counts.</p>

  <h3>Category</h3>

  <p>Here you can determine whether this member shall be treated as a variable <a href="../TwoObjectCategories.htm">state object</a> 
      or as an immutable <a href="../TwoObjectCategories.htm">value object</a>. In the 
      latter case its direct and nested <a href="../PointersRefCounts.htm#refTypes">constituents</a> cannot be modified after the object has been completely <a href="../ObjectLifeCycle.htm#creation">created/initialized</a>. 
      If you would like to admit both categories then select &quot;Any category&quot; here. (You 
      may use the <span class="style1">copy</span> statement or the
      <span class="style1">clone</span> expression to produce an object of a fixed, 
      known category from such an &quot;Any category&quot; variable.</p>

  <h3>Protected</h3>

  <p>A <a href="../ProtectedFriend.htm">protected</a> member variable can be accessed only by functions contained in the implementation of the present or a derived class.</p>

  <h3>Read-only</h3>

  <p>A read-only member variable <em>xy</em> of some object can be assigned a value only &quot;from inside the object&quot; via the path <em>self.xy</em>,, i.e., from within functions belonging to the current class or its implementation. It is write-protected against access &quot;from outside&quot;.</p>

  <h3>Abstract</h3>

  <p>This attribute is enabled only if the member variable is accessed via set/get functions (see next paragraph). It allows you to defer the implementation of the set/get functions to a derived class: So actually the set/get functions are abstract.</p>

  <h3>Access via set/get functions</h3>

  <p>If a member variable <em>xy</em> has this property then <a href="../Unsolved.htm#setGetFunctions">set/get functions</a> are generated for it in the implementation of the containing class. Every read or write access to the variable is redirected implicitly through these get/set functions. Only these set/get functions themselves may directly access the variable. In this way you can supervise every access attempt to the variable and, by properly modifying the default set/get functions, achieve additional side effects or perform access permission checks.</p>

  <a id="consumable" /><h3>Consumable</h3>

  <p><em>Consumable</em> member variables are used for <a href="../Transactions.htm#producerConsumer">producer/consumer synchronization</a> in <em class="c2">Lava</em> (not yet implemented).</p>

  <h3>Mode</h3>

  <p>The mode of a member variable may be <a id="mandatory" /><strong>mandatory</strong> (default), <strong>optional</strong>, or <strong>placeholder</strong>. If <em>optional</em>, the parameter may assume the special <em>null value</em> 
      <span class="style1">&#216;</span> (&quot;undefined&quot;). <em>Placeholder</em> members cannot be accessed at all. They are used in <a href="../EditForm.htm">forms</a> to describe fields that are to be <em>filled in</em> only in a later step by some other person, although they are <em>visible</em> from the beginning.</p>

  <h3>See also</h3>

  <p class="c5"><a href="../SepItfImpl.htm"><span class="style2">Lava</span><strong> classes/interfaces/implementations</strong></a></p>

  <p class="c3"><a href="../ObjectLifeCycle.htm"><span class="style3">Lava</span> variables</a></p>
</body>
</html>
