<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Virtual type property sheet</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="../LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
          font-weight: bold;
      }
  </style>
</head>

<body>
  <h2 class="c1">Virtual type property sheet</h2>

  <h3>Name</h3>

  <p>The name of a virtual type (or &quot;<a href="../PatternsFrameworks.htm">pattern</a> parameter&quot;) may contain only letters, digits, and &quot;_&quot;. The first character must not be a digit.</p>

  <h3>Enable renaming</h3>

  <p>You may change the names of functions, member variables and virtual types when you override them in a derived class or pattern (for instance in order to resolve name collisions in cases of multiple inheritance). They inherit the names of the base versions by default (and their name is changed accordingly if the inherited base name is changed). Check this check-box if you would like to assign a different name (which will not be changed then if the base name is changed).</p>

  <h3>Select value type of VT</h3>

  <p>If a virtual type is not abstract then you must specify an existing type as its value. This may be a concrete type or may again be virtual and may be selected from the combo-boxes &quot;Basic classes&quot; and &quot;Other classes&quot;. &quot;Basic classes&quot; lists all interfaces whose declaration is contained in the basic include file <em>std.lava</em>.</p>

  <h3>Remove overrides</h3>

  <p>Transforms an <a href="../OverrideView.htm">overridden</a> virtual type into a non-overridden virtual type, as if it had been newly declared in the containing pattern.</p>

  <h3>Abstract VT</h3>

  <p>A virtual type (pattern parameter) of a package or of a <a href="InterfaceBox.htm#creatable">non-creatable</a> class may be abstract. I.e., the specification of a value type for this pattern parameter is deferred to a derived pattern.</p>

  <h3>Defines object category</h3>
    <p>The <a href="../TwoObjectCategories.htm">category</a> (state or value object) of 
        an object of this type may be specified either already by this VT or else by a 
        variable declaration that uses this VT.</p>

  <h3>Object category</h3>
    <p>If the VT determines the object <a href="../TwoObjectCategories.htm">category</a> 
        then you may specify it here.</p>
    <h3>Final</h3>

  <p>A &quot;final&quot; VT cannot be overridden in a derived class or package. If you want to 
      assign a constant or an object of a non-virtual type to a VT v then you may&nbsp; 
      be forced to declare v to be &quot;final&quot;, since otherwise <span class="style1">
      LavaPE</span> would refute the assignment as being unsafe: The <strong>fixed</strong> type 
      of the assignment source could become incompatible to the <strong>virtual</strong> type of 
      the assignment target if the latter would be associated with a more derived type 
      in a derived class or package.<br />
      <br />
      In some cases it will be more appropriate to declare the function in whose body 
      the assignment occurs as &quot;callable only from this VT context&quot; (= &quot;force override 
      on derivation&quot;) to achieve the same effect without the necessity to declare the 
      respective VT to be &quot;final&quot;.<br />
      <br />
      See the <strong>FinalVirtualType.lava</strong> and <strong>ForceFunctionOverride.lava</strong> 
      sample programs.</p>

  <h3>Substitutable</h3>
    <p>Indicates whether this VT shall be <a href="../TypeSafety.htm#substitutableType">substitutable</a>, i.e., whether the type of a corresponding 
        assignment source may even be <a href="../TypeSafety.htm#p-derived">p-derived</a> (rather than <a href="../TypeSafety.htm#c-derived">c-derived</a>) from this 
        virtual type. (Cf. the <em><a href="../PatternSamples.htm">ModelManyViews</a></em> and <em><a href="../PatternSamples.htm">CarMeeting</a></em> samples.)</p>
    <h3>Kind of element reference</h3>

  <p>If this VT defines the type of the elements of a set, chain, or array then you may specify whether the elements are treated as <a href="../PointersRefCounts.htm#refTypes">constituents, acquaintances or reverse links</a>.</p>
</body>
</html>
