<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="Author" content="Klaus D. Günther">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document"><title>Virtual type property sheet</title>

<link rel="STYLESHEET" type="text/css" href="../LavaStyles.css">
</head>


  
  <body>
<h2 align="center">Virtual type property sheet</h2>
<h3>Name</h3>
<p>The name of a virtual type (or "<a href="../PatternsFrameworks.htm">pattern</a>
parameter") may contain only letters, digits, and "_". The first
character must not be a digit.</p>
<h3>Enable renaming</h3>
<p>You may change the names of functions, member variables and
virtual types when you override them in a derived class or pattern (for
instance in order to resolve name collisions in cases of multiple
inheritance). They inherit the names of the base versions by default
(and their name is changed accordingly if the inherited base name is
changed). Check this check-box if you would like to assign a different
name (which will not be changed then if the base name is changed).</p>
<h3>Select value type of VT</h3>
<p>If a virtual type is not abstract then you must specify an
existing type as its value. This may be a concrete type or may again be
virtual and may be selected from the combo-boxes "Basic classes" and
"Other classes". "Basic classes" lists all interfaces whose declaration
is contained in the basic include file <i>std.lava</i>. </p>
<hr>
<h3>Remove overrides</h3>
<p>Transforms an <a href="../OverrideView.htm">overridden</a>
virtual type into a non-overridden virtual type, as if it had been
newly declared in the containing pattern.</p>
<!--H3>Final</H3> <P>A <A HREF="../TypeSafety.htm#compatibility">final virtual type</A> may not be overridden when overriding the containing pattern. This may be required if a variable whose type is the current VT occurs on the target side of an assignment anywhere.</P> -->
<h3>Abstract</h3>
<p>A virtual type (pattern parameter) of a package or of a <a href="InterfaceBox.htm#creatable">non-creatable</a>
class may be abstract. I.e., the specification of a value type for this
pattern parameter is deferred to a derived pattern. </p>
<h3>Kind of element reference</h3>
<p>If this VT defines the type of the elements of a set, chain,
or array then you may specify whether the elements are treated as <a href="../PointersRefCounts.htm#refTypes">constituents,
acquaintances or reverse links</a>.</p>

</body></html>

