<!DOCTYPE HTML PUBLIC "-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//EN"
 "hmpro4.dtd">

<HTML>
  
  <HEAD>
    <meta http-equiv="Content-Language" content="en-us">
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
    <META NAME="Author" CONTENT="Klaus D. Günther">
    <META NAME="GENERATOR" CONTENT="Microsoft FrontPage 5.0">
    <meta name="ProgId" content="FrontPage.Editor.Document">
    <TITLE>Projects, programming in the large</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="LavaStyles.css">
  </HEAD>
  
  <BODY>
    
    <H2 ALIGN="CENTER"><B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
    projects, programming in the large</H2>
    
    <H3 ALIGN="LEFT">Projects, directories</H3>
    
    <P><B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> doesn't provide a
      specific project notion. We believe that it is the primary purpose of <B>file
      systems </B>and<B> directories</B> to arrange sets of files in groups and
      subgroups of more or less closely related files, and we believe that you
      should not confuse the users by providing additional, redundant structures
      in the absence of a really strong motivation.</P>
    
    <H3><A NAME="include"></A>Lava files, file inclusion</H3>
    
    <P>The file name suffix of a <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      file indicates the intended <A HREF="ExecEnvironment.htm">execution
        environment</A> of the contained <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      application. Our considerations concerning execution environments are
      still in a very early and provisory state. Presently the <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      interpreter supports only a provisory version of a forms-oriented MDI
      execution environment (MDI = Multiple-Document Interface), which is
      associated with the <B><I><FONT COLOR="#FF0000">.lava</FONT></I></B>
      suffix.</P>
    
    <P>A <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> file contains a
      top-level <B>package</B> (see below) which is unnamed by default. If you
      assign a name to it then all references to contained <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      entities will be qualified with this package name.</P>
    
    <P><B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> files may <B>&quot;include&quot;</B>
      other <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> files. The basic
      <B><I><FONT COLOR="#FF0000">std.lava</FONT></I></B> file is always
      included. It contains the declarations of the basic built-in <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      data types (Boolean, Double, Float, Integer, String, Enumeration, Set,
      Chains, Array, Callback, ...). There is no special kind of &quot;include
      files&quot; like the &quot;header files&quot; of <B><I><FONT COLOR="#FF0000">C++</FONT></I></B>.
      The include mechanism is just a means to make the contents of another file
      available as if it were part of the including file. So it isn't an error if
      two <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> files include each
      other, and you need not worry about circular includes.</P>
    
    <P><A NAME="nameClash"></A>Name clashes between <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      entities contained in two included files or in the including and the
      included file can be resolved within the including file F by assigning
      unique &quot;local alias names&quot; (&quot;use as&quot; names) to the top
      level packages of the included files within F.</P>
    
    <H3><A NAME="packages"></A>Packages</H3>
    
    <P>In <font color="#FF0000"><i><b>Java</b></i></font> a file &quot;belongs&quot; 
    always to a single package and a package may extend over many files. On the 
    other hand the
      <A HREF="EditTree.htm"><B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
        declaration tree</A> which makes up a <font color="#FF0000"><b>Lava</b></font> 
    file may consist of many nested packages, and every <font color="#FF0000">
    <i><b>Lava</b></i></font> package is completely contained in one
    <font color="#FF0000"><i><b>Lava</b></i></font> file.</P>
    
    <P>This complete containment even
      of a huge package in a single <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      file is greatly facilitated by the fact that implementations can be <a href="SepItfImpl.htm">
      separated</a> from interfaces and stored in separate files in <B><I><FONT COLOR="#FF0000">Lava
      </FONT></I></B>whereas the bodies of <B><I><FONT COLOR="#FF0000">Java</FONT></I></B>
      member functions have to be included in their respective class
      declarations. In this way you can have a combination of pure package and
      interface declaration files and perhaps many separate implementation files
      in <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>, where every
      implementation file might perhaps contain the implementation of only one
      interface.</P>
    
    <P>You can declare a package to be<B> <A NAME="opaque"></A><A HREF="ProtectedFriend.htm">opaque</A></B>
      to prevent access to the contained declarations from the &quot;outside
      world&quot;. In this way you can achieve similar effects as with <B>private/friend</B>
      declarations in <B><I><FONT COLOR="#FF0000">C++</FONT></I></B> or with
      <B>inner classes</B> in <B><I><FONT COLOR="#FF0000">Java</FONT></I></B>.</P>
    
    <P>Packages may have <B>&quot;pattern parameters&quot;</B> or <B>&quot;virtual
      types&quot;</B>. Based on these they can be used to define
      <A HREF="PatternsFrameworks.htm"><B>&quot;patterns/frameworks&quot;</B></A>,
      i.e., groups of parameterized classes that can be derived/specialized
      collectively and consistently.</P>
    
    <h3><font color="#FF0000"><i>Lava</i></font> f<b>iles and packages in 
    perspective</b></h3>
    
    <P> <font color="#FF0000"><b><i>Lava</i></b></font> packages may be <i>
    nested</i> within <i><font color="#FF0000"><b>Lava</b></font></i> files. The 
    leaf nodes of this package tree are primarily used to constitute <b>families</b><i>
    </i>of closely related, possibly parameterized, <b>cooperating classes</b>, 
    or implementations thereof. Non-leaf nodes in the package tree would 
    constitute <b>collections of related families</b>.</P>
    
    <P>On the other hand, <font color="#FF0000"><b><i>Lava</i></b></font> <i>files</i> 
    are bigger software units that play a role on the level of <i>project and 
    product&nbsp; organization</i>:</P>
    
    <ul>
      <li>Files are the smallest units that can be <b>loaded independently</b> into the
      <font color="#FF0000"><i><b>Lava</b></i></font> interpreter.</li>
      <li>Therefore they may be viewed also as <b>units of software reuse</b>,</li>
      <li>or as reasonable <b>work items / units of responsibility</b> that are 
      assigned to programmers.</li>
    </ul>
    
    <H3><A NAME="initiator"></A>Initiators</H3>
    
    <P>If you want to <B>execute</B> a <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      file you just have to make sure that the first <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      entity in its top-level package is an <B>initiator</B>. Initiators play
      the role of <B>&quot;autonomous main programs&quot;</B> in <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B> 
    and start with the ke<span lang="de">y</span>word <span lang="de">&quot;</span><font color="#0000FF"><b>main</b></font><span lang="de">&quot;</span>.
      They may have input parameters but once started they run autonomously
      (possibly even as <A HREF="Transactions.htm">concurrently executing
        threads/transactions</A>). In particular they don't return output
      parameters and cannot throw exceptions to the calling level. A <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
      program may (recursively) launch any number of subordinate initiators and
      thus consist of a collection of concurrently executing threads.</P>
    
    <H3></A><a name="implSearch"></a>How <font color="#FF0000"><i>Lava</i></font> 
    locates implementations of interfaces</H3>
    
    <P>First note that <A HREF="commands/NewImplementation.htm">implementations</A> cannot and
      need never be referenced expressly in <FONT COLOR="#FF0000"> <B><I>Lava</I></B></FONT> 
    but only implicitly:</P>
    
    <P>If C is a &quot;<a href="SepItfImpl.htm#objectCreation">creatable</a>&quot; <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B>
    <a href="SepItfImpl.htm">interface</a> and a new object of type <i>C</i> is to be created 
    then the <b><i><font color="#FF0000">Lava</font></i></b> interpreter 
    searches the current file and all directly or indirectly included files for 
    an implementation of <i>C</i>. As soon as an implementation<i> Imp</i> of <i>C
    </i>is
    found a (transient) pointer to <i>Imp</i> is stored in the internal
    representation of the interface<i> C</i>, with the effect that this same implementation <i>Imp</i>
    of <i>C</i> is used throughout the entire run of this application.</P>
    
    <P>So you have to make sure that for every interface that doesn't consist 
    solely of abstract functions a suitable file containing the desired 
    implementation is included anywhere in such a way that this implementation 
    will be found at run time by searching the &quot;include tree&quot;.</P>
    
    <P>Note that it isn't a problem in <font color="#FF0000"><i><b>Lava</b></i></font> 
    if two <font color="#FF0000"><i><b>Lava</b></i></font> files include each 
    other or if circular include paths consisting of more than two files occur. 
    The implementation search process reads every included file at most once.</P>
    
    <P>Because <font color="#FF0000"><i><b>Lava</b></i></font> strictly 
    separates interfaces and implementations you can even have several different 
    implementations of the same interface. They should be contained in different
    <font color="#FF0000"><i><b>Lava</b></i></font> files since otherwise only 
    the first of them (in &quot;tree search order&quot;) will be found. In such a case it 
    is obvious to use special &quot;implementation include files&quot; that don't contain 
    anything else but include directives for implementation files. These 
    &quot;implementation include files&quot; would in turn be included by the actual
    <font color="#FF0000"><i><b>Lava</b></i></font> program files and would in 
    this way control the proper selection of implementation variants. You could 
    then provide a number of versions of these implementation include files for 
    various combinations of class implementation variants.</P>
    
    <P><B>See also</B></P>
    
    <P><B> <A HREF="ProtectedFriend.htm">&quot;Private&quot; / &quot;protected&quot;
        / &quot;friend&quot; counterparts in <B><I><FONT COLOR="#FF0000">Lava</FONT></I></B></A></B></P>
    
    <P><B><A HREF="PatternsFrameworks.htm">Patterns / frameworks</A></B></P>
  </BODY>
</HTML>