<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Object-oriented analysis and design</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  i.c4 {font-weight: bold; color: Red}
  a.c3 {font-weight: bold}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
      }
  </style>
</head>

<body>
  <h2 class="c1">Using <span class="style1">Lava</span> for object-oriented analysis and design</h2>

  <p><b class="c2">Lava</b> supports a <b>highly incremental programming style</b> with successive completion and modification of initially very coarse and preliminary declarations that may require major revisions and restructuring later:</p>

  <ul>
    <li>You can start by defining just a few object classes (= <b class="c2">Lava</b> classes) having a few primary methods.</li>

    <li>You need not yet assign attributes (= member variables) to the object classes,</li>

    <li>and you need not (but may) declare formal parameters for the methods.</li>
  </ul>

  <p>For instance, the object-oriented essence of a <b class="c2">UML</b> &quot;use case&quot; like &quot;bank customer opens new account&quot;, which would typically be established in the requirements analysis phase of a new project, can be imitated quite easily and naturally in <b class="c2">Lava</b> by declaring three classes &quot;Bank&quot;, &quot;Customer&quot; and &quot;Account&quot; and a &quot;CreateAccount&quot; method of &quot;Bank&quot;.</p>

  <p>You can successively add details (member variables, formal parameters, further classes, partial implementations of functions) just as they come into your head.</p>

  <p>You need not interrupt your flow of thoughts and switch to a completely different representation (from &quot;use cases&quot; to &quot;class diagrams&quot;, say) just because you want to keep your idea that the CreateAccount method should have an input parameter of type &quot;Customer&quot; and an output parameter of type &quot;Account&quot;. You may stay within the same language all the time and add, remove, and change details just as they cross your mind.</p>

  <p><b class="c2">Lava</b> provides <b>automatic updates of all existing references</b> if you change the arrangement of declarations in the <b class="c2">Lava</b> declaration tree, if you assign a new name to any <b class="c2">Lava</b> entity, or if you change the order or number of formal parameters of a function. Therefore it is very inexpensive to make such changes, and this makes it very attractive to use <b class="c2">Lava</b> already in the still very instable analysis and design phases of software projects.</p>

  <p>It <i>is</i> expensive, however, to move <i>member variables or functions</i> from one class to another one, since they must then be referenced through other (containing) variables, and the parameters of the functions will have to be adapted to the new environment. This cannot easily be performed by an <i>automatic</i> update of references but will require <i>manual</i> changes at all affected places.</p>

  <p>Therefore it is very important to arrive at a stable assignment of member variables and functions to containing classes <i>as early as possible</i>. In our opinion this is a strong argument in favor of using an <b>incremental single-language approach like <i>Lava</i> in OO analysis, design and implementation</b>.</p>

  <p><b class="c2">Lava</b> provides particular support for the design phase by providing a specialization/override notion for <i>families</i> of related classes that refer to each other and that have overridable type parameters (<a href="PatternsFrameworks.htm">patterns / virtual types</a> ). They are particularly suited to represent reusable and adaptable <a class="c3" target="_blank" href="http://hillside.net/patterns/">design patterns</a> and frameworks on which you may want to build during the design phase.</p>

  <p><a id="patternLanguage"></a>Additionally we could imagine that the nested tree structure of <i class="c4">Lava</i> declarations may be well suited for specifying entire <b>&quot;<a target="_blank" href="http://www.designmatrix.com/pl/anatomy.html">pattern languages</a>&quot;</b> as tree structures consisting of primary and subordinate (&quot;auxiliary&quot; / &quot;successor&quot;) patterns.</p>
</body>
</html>
