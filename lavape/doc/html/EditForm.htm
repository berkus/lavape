<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Editing GUI specifications</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h3.c4 {font-weight: bold}
  i.c3 {font-weight: bold; color: Red}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #0000FF;
          font-weight: bold;
      }
      .style2
      {
          color: #FF0000;
      }
  </style>
</head>

<body>
  <h2 class="c1">Editing GUI specifications</h2>

  <p>The point-and-click philosophy of <b class="c2">LavaPE</b> implies in particular that a few mouse-clicks suffice to produce a default form representation from a given class declaration. This automatic mapping is governed by the following simple principles some of which have not yet been implemented (NYI) so far, however:</p>

  <ul>
    <li><b>Member variables</b> of the class are mapped to the <b>data fields</b> of the form.</li>

    <li>The <b>identifiers</b> of variables are used as <b>explanatory text to the left of the data field</b> unless you specify alternative texts/positions.</li>

    <li>If the type of a member variable is again a user-defined class then this member variable is represented by a nested form (<b>&quot;group box&quot;</b>) or possibly also by a <b>pop-up form</b>, provided you have generated a form representation for this member type previously.</li>

    <li><b>Member functions</b> are represented by <b>tool buttons</b> or <b>menu items</b> that trigger the member functions if they are clicked/selected from the menu (NYI).</li>

    <li>The member functions of <b>inherited classes</b> (<b class="c2">Lava</b> supports multiple inheritance!) are placed in separate <b>toolbars</b> or <b>menus</b> of their own (NYI).</li>
  </ul>

  <p>The representation of an elementary data field depends on the type of the corresponding member variable:</p>

  <ul>
    <li><b>Integer</b>, <b>Float</b>, <b>Double</b>, and <b>String</b> are represented by small single-line <b>text edit windows</b>. For <b>String</b> multi-line text edit windows may be used alternatively.</li>

    <li><b>Boolean</b> variables are represented by <b>check-boxes</b>.</li>

    <li><b>Enumerated types</b> may be represented by <b>combo-boxes</b>, <b>pop-up menus</b>, <b>groups of radio-buttons</b>, or groups of normal <b>push buttons</b>.</li>

    <li><b>Chains</b> (= doubly-linked lists) of some element type are represented by horizontal or vertical <b>lists</b>, usually of variable length.</li>

    <li>Constant <b>default values</b> may be specified for elementary fields.</li>

    <li><b><a id="sub-form"></a>Non-elementary</b> field types that are defined by another <b class="c2">Lava</b> type are put into a nested rectangular box. The fields of the corresponding sub-form are positioned relative to this containing <b>sub-form box</b>.</li>
  </ul>

  <h3><a id="GUI"></a>GUI service classes / implementations: How to generate and edit forms</h3>

  <p>You can generate a default form representation <i>GUI_of_XY</i> of an existing class <i>XY</i> with a single mouse-click:</p>

  <ol>
    <li>After you have selected class XY in the declaration tree, you simply click on the tool button <img src="../images/MakeGUI.png" height="21" width="23" alt="img" /> (&quot;Make GUI service for selected class&quot;).</li>

    <li>This generates a new GUI service class <i>GUI_of_XY</i> (icon: <img src="../images/formint.png" height="15" width="21" alt="img" />) as well as its implementation (icon: <img src="../images/Formimpl.png" height="21" width="23" alt="img" />). You may open its properties dialog by clicking the scissors tool button <b><img alt="Open property sheet" src="../images/Spectacles.png" height="20" width="22" /></b> and, for instance, change its name then.</li>

    <li>Select the GUI service implementation node and click the <b>&quot;Open form view&quot;</b> tool button on the <a href="EditTree.htm#declBar">declaration toolbar</a>, which has the same icon <img src="../images/Formimpl.png" alt="Open form view" height="21" width="23" /> as the GUI implementation node. The form view is opened, consisting of two panes: the actual <b>form view</b> (WYSIWYG, read-only) on the left, and the <b>properties pane</b> on the right. The latter consists of a <b>form structure tree</b> in the upper half, and the actual <b>field properties pane</b> in the lower half.</li>

    <li>Now you can select a form field, either in the form view, or in the form structure tree, and edit its properties in the field properties pane.</li>

    <li>You can intersperse &quot;intermediary text&quot; after any field of the form by selecting this field in the form structure tree and pressing the return key. (Alternatively you can click the &quot;intermediary text&quot; button <img src="../images/TextButton.png" height="19" width="20" alt="img" />.)</li>

    <li>You can control the horizontal and vertical positioning of fields.</li>

    <li>You can specify initial default values for individual fields. They override the values provided by <i>XY</i>&#39;s default initializer.</li>
  </ol>

  <p>Note: If class <i>XY</i> has a member of some class <i>Z</i> then a GUI service class and implementation is generated also for class <i>Z</i> if none existed so far (or one is selected if Z has a GUI service already). Or more generally: GUI service classes are generated recursively where required, or selected from the existing ones. (This selection can be modified afterwards.)</p>

  <h3><a id="handlers"></a>Adding handlers (callbacks) to individual fields of forms</h3>

  <p>The context menu, either on an input field in the form view (left pane), or in the form structure tree (upper half of right pane) allows you to add a new handler to the field or to attach an appropriate existing handler to it. (On text edit fields you must proceed to the &quot;Lava&quot; sub-menu of the context menu.)</p>

  <p>The handler function is created as a member function of the respective GUI service implementation. The function property dialog expects you to select a GUI event type to be handled. For input fields, <b class="c2">Lava</b> provides presently only one GUI event type &quot;New value&quot;, which is signaled when a new value has been entered in an input field. <i class="c3">Lava</i> passes the original value and the newly entered value as input parameters to the handler. The handler may pass a modified value to its (optional) output parameter.</p>

  <p>If a <i class="c3">Lava</i> class <i>XY</i> contains an optional member variable <i>optvar</i> then it ill be represented by a push button in the corresponding form representation of <i>XY</i>. It can be pushed to insert the form representation of <i>optvar</i> in place of the button. On the push button, as well as on the form representation, you can invoke the context menu to assign a handler to the &quot;Insert/delete optional&quot; event, which is signaled when you attempt to insert or delete an optional item.</p>

  <p>Likewise, <i class="c3">Lava</i> classes that are derived from the <i class="c3">Lava</i> <i>Chain</i> class provide &quot;Insert/delete chain element&quot; events, which are signaled when you attempt to insert or delete a chain element. Again you may control by corresponding handlers whether the insert/delete operation is accepted, and in the insert case you may optionally return the element to be inserted to the <i class="c3">Lava</i> run time system (or else default initialization, see above, will be applied to the element).</p>

  <p>More than one GUI event handler may be attached to the same input field, optional or chain element. Typically this is used to provide specialized behaviour in specialized contexts:</p>

  <p>For instance, assume <i>fld</i> is an input field in GUI service <i>F_XY</i> and <i>F_XY</i> is in turn used as a sub-form in GUI service <i>F_Z</i>. Then you may attach a &quot;New value&quot; handler to fld in <i>F_XY</i> and another one in <i>F_Z</i>. The latter will be used whenever <i>fld</i> is used in the <i>F_Z</i> context, the former whenever F_XY is the top level GUI service or the &quot;parent&quot; GUI service doesn&#39;t have a &quot;New value&quot; handler for fld. The <i class="c3">Lava</i> run time system will always invoke the uppermost handler in the form/sub-form hierarchy if several handlers exist for an input field, optional or chain element, i.e., the handler belonging to the most special usage context.</p>

  <h3>How to present/fill out a form</h3>

  <p>Every GUI class contains two member functions <b>FillOut</b> and <b>Edit</b> that can be called in order to present the form representation <i>F_XY</i> of an object <i>xy</i> of type <i>XY</i>. Before you can call <b>FillOut</b> and<b> Edit</b> you must create an object <i>f_xy</i> of type <i>F_XY</i>. The object <i>xy</i> serves as input parameter to <b>FillOut</b> and <b>Edit</b>.</p>

  <p><b>FillOut</b> first generates a copy of <i>xy</i>. this copy is presented to the user. The copy may be modified by the user then. Clicking the OK button terminates the editing process and <b>FillOut</b> passes the modified copy through its output parameter to the caller.</p>

  <p>You can use <b>FillOut</b> also to present and fill out an <b>empty form</b>: Simply pass the input parameter &quot;<span 
          class="style1">&#216;</span>&quot; (the &quot;null&quot; object&quot;) to <b>FillOut</b> (&quot;empty input form&quot;).</p>

  <p><b>Edit</b> presents its input object <i>xy</i> directly to the user (rather than a copy of it) and allows the user to edit it &quot;in place&quot;, provided xy is a state object.</p>

  <p><b>Summary:</b> <b>FillOut</b> uses its input parameter, which is a value object, as a template for the initialization of a separate output object which may be modified by the user after initialization and which is returned finally as an output parameter. <b>Edit</b> accepts a state object as input parameter and enables you to modify it &quot;in place&quot;. Both <b>FillOut</b> and <b>Edit</b> are terminated by clicking the OK button.</p>

  <p>In contrast to this <b>FillOut</b> and<b>Edit</b> mechanism, persistent <i class="c3"><a href="ComponentSamples.htm">
      <span class="style2">Lava</span></a></i> <a href="ComponentSamples.htm">component objects</a> may be edited &quot;directly&quot; without explicit invocation of a forms editing method (but using the same kind of <b class="c2">Lava</b> GUI services as <b>FillOut</b> and <b>Edit</b>).</p>

  <h3 class="c4">See also</h3>

  <p>our <a href="FormSample.htm">form sample</a> and the<i class="c3"> <a href="ComponentSamples.htm">
      <span class="style2">Lava</span></a></i> <a href="ComponentSamples.htm">component object</a> samples.</p>
</body>
</html>
