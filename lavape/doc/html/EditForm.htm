<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="Author" content="Klaus D. Günther">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document"><title>Editing GUI specifications</title>

<link rel="STYLESHEET" type="text/css" href="LavaStyles.css">
</head>
<body>
<h2 align="center">Editing GUI specifications</h2>
<p>The
point-and-click philosophy of <b><i><font color="#ff0000">LavaPE</font></i></b>
implies in particular that a few mouse-clicks suffice to produce a
default form representation from a given class declaration. This
automatic mapping is governed by the following simple principles some
of which have not yet been implemented (NYI) so far, however:</p>
<ul>
<li><b>Member variables</b> of the class
are mapped to the <b>data fields</b> of the form.</li>
<li>The <b>identifiers</b> of variables are used
as <b>explanatory
text to the left of the data field</b> unless you specify
alternative texts/positions.</li>
<li>If the type of a
member variable is again a user-defined class then this member variable
is represented by a nested form (<b>"group box"</b>) or
possibly also by a <b>pop-up form</b>, provided you have
generated a form representation for this member type previously.</li>
<li><b>Member functions</b> are represented by <b>tool
buttons</b> or <b>menu items</b> that trigger the
member functions if they are clicked/selected from the menu (NYI).</li>
<li>The member functions of <b>inherited classes</b>
(<b><i><font color="#ff0000">Lava</font></i></b>
supports multiple inheritance!) are placed in separate <b>toolbars</b>
or <b>menus</b> of their own (NYI).</li>
</ul>
<p>The representation of an elementary data field depends on the
type of the corresponding member variable:</p>
<ul>
<li><b>Integer</b>,
<b>Float</b>, <b>Double</b>, and <b>String</b>
are represented by small single-line <b>text edit windows</b>.
For <b>String</b> multi-line text edit windows may be used
alternatively.</li>
<li><b>Boolean</b>
variables are represented by <b>check-boxes</b>.</li>
<li><b>Enumerated types</b> may be represented by <b>combo-boxes</b>,
<b>pop-up menus</b>, <b>groups of radio-buttons</b>,
or groups of normal <b>push buttons</b>.</li>
<li><b>Chains</b>
(= doubly-linked lists) of some element type are represented by
horizontal or vertical <b>lists</b>, usually of variable
length.</li>
<li>Constant <b>default values</b>
may be specified for elementary fields.</li>
<li><b><a name="sub-form"></a>Non-elementary</b>
field
types that are defined by another <b><font color="#ff0000"><i>Lava</i></font></b>
type are put into a nested rectangular box. The fields of the
corresponding sub-form are positioned relative to this containing <b>sub-form
box</b>.</li>
</ul>
<h3><a name="GUI"></a>GUI
service classes / implementations: How to generate and edit forms</h3>
<p>You can generate a default form representation <i>GUI_of_XY</i>
of an existing class <i>XY</i> with a single mouse-click:</p>
<ol>
<li>After you have selected class XY in the
declaration tree, you simply click on the tool button <img src="../images/MakeGUI.png" align="middle" border="0" height="21" width="23"> ("Make GUI service for
selected class").</li>
<li>This generates a new GUI
service class <i>GUI_of_XY</i> (icon: <img src="../images/formint.png" border="0" height="15" width="21">) as well as its implementation (icon: <img src="../images/Formimpl.png" border="0" height="21" width="23">). You may open its properties dialog by clicking
the scissors tool button <b> <img alt="Open property sheet" src="../images/Spectacles.png" align="middle" height="20" width="22"> </b> and, for instance, change its name
then.</li>
<li>Select the GUI service implementation node
and click the <b>"Open form view"</b> tool button on the <a href="EditTree.htm#declBar">declaration toolbar</a>,
which has the same icon <img src="../images/Formimpl.png" alt="Open form view" align="middle" height="21" width="23"> as the GUI implementation node. The form view is
opened, consisting of two panes: the actual <b>form view</b>
(WYSIWYG, read-only) on the left, and the <b>properties pane </b>
on the right. The latter consists of a <b>form structure tree</b>
in the upper half, and the actual <b>field properties pane</b>
in the lower half.</li>
<li>Now you can select a form
field, either in the form view, or in the form structure tree, and edit
its properties in the field properties pane.&nbsp;</li>
<li>You
can intersperse "intermediary text" after any field of the form by
selecting this field in the form structure tree and pressing the return
key. (Alternatively you can click the "intermediary text" button <img src="../images/TextButton.png" align="middle" border="0" height="19" width="20">.)</li>
<li>You
can control the horizontal and vertical positioning of fields.</li>
<li>You can specify initial default values for individual
fields.
They override the values provided by <i>XY</i>'s default
initializer.</li>
</ol>
<p>Note: If class <i>XY</i>
has a member of some class <i>Z</i> then a GUI service
class and implementation is generated also for class <i>Z </i>if
none existed so far (or one is selected if Z has a GUI service
already). Or more generally: GUI service classes are generated
recursively where required, or selected from the existing ones. (This
selection can be modified afterwards.)</p>
<h3><a name="handlers"></a>Adding handlers
(callbacks) to
individual fields of forms</h3>
<p>The context menu,
either on an input field in the form view (left pane), or in the form
structure tree (upper half of right pane) allows you to add a new
handler to the field or to attach an appropriate existing handler to
it. (On text edit fields you must proceed to the "Lava" sub-menu of the
context menu.)</p>
<p>The handler function is created as a
member function of the respective GUI service implementation. The
function property dialog expects you to select a GUI event type to be
handled. For input fields, <b><font color="#ff0000"><i>Lava</i></font></b>
provides presently only one GUI event type "New value", which is
signaled when a new value has been entered in an input field. <font color="#ff0000"><i><b>Lava</b></i></font>
passes the original value and the newly entered value as input
parameters to the handler. The handler may pass a modified value to its
(optional) output parameter.</p>
<p>If a <font color="#ff0000"><i><b>Lava</b></i></font>
class <i>XY</i> contains an optional member variable <i>optvar</i>
then it ill be represented by a push button in the corresponding form
representation of <i> XY</i>. It can be pushed to insert
the form representation of <i>optvar</i> in place of the
button. On the push button, as well as on the form representation, you
can invoke the context menu to assign a handler to the "Insert/delete
optional" event, which is signaled when you attempt to insert or delete
an optional item.</p>
<p>Likewise, <font color="#ff0000"><i><b>Lava</b></i></font>
classes that are derived from the <font color="#ff0000"><i><b>Lava</b></i></font>
<i> Chain</i> class provide "Insert/delete chain element"
events, which are signaled when you attempt to insert or delete a chain
element. Again you may control by corresponding handlers whether the
insert/delete operation is accepted, and in the insert case you may
optionally return the element to be inserted to the <font color="#ff0000"><i><b>Lava</b></i></font>
run time system (or else default initialization, see above, will be
applied to the element).</p>
<p>More than one GUI event
handler may be attached to the same input field, optional or chain
element. Typically this is used to provide specialized behaviour in
specialized contexts:</p>
<p>For instance, assume <i>fld</i>
is an input field in GUI service <i>F_XY</i> and <i>F_XY</i>
is in turn used as a sub-form in GUI service <i>F_Z</i>.
Then you may attach a "New value" handler to fld in <i>F_XY</i>
and another one in <i>F_Z</i>. The latter will be used
whenever <i>fld</i> is used in the <i>F_Z</i>
context, the former whenever F_XY is the top level GUI service or the
"parent" GUI service doesn't have a "New value" handler for fld. The <font color="#ff0000"><i><b>Lava</b></i></font>
run time system will always invoke the uppermost handler in the
form/sub-form hierarchy if several handlers exist for an input field,
optional or chain element, i.e., the handler belonging to the most
special usage context.</p>
<h3>How to present/fill out a
form</h3>
<p>Every GUI class contains two member functions
<b>FillOut </b>and<b> Edit</b> that can be
called in order to present the form representation <i>F_XY</i>
of an object <i>xy</i> of type <i>XY</i>.
Before you can call&nbsp; <b>FillOut </b>and<b>
Edit </b>you must create an object <i>f_xy</i> of
type <i>F_XY</i>. The object <i>xy</i> serves
as input parameter to <b>FillOut </b>and<b> Edit</b>.
</p>
<p><b>FillOut </b>first generates
a copy of <i>xy</i>. this copy is presented to the user.
The copy may be modified by the user then. Clicking the OK button
terminates the editing process and <b>FillOut</b> passes
the modified copy through its output parameter to the caller.</p>
<p>You can use <b>FillOut </b>also to present and
fill out an <b>empty form</b>: Simply pass the input
parameter "<b><font color="#0000ff">Ø</font></b>"&nbsp;
(the "null" object") to <b>FillOut </b>("empty input
form"). </p>
<p><b>Edit</b> presents its
input object <i>xy </i>directly to the user (rather than
a copy of it) and allows the user to edit it "in place", provided xy is
a state object.</p>
<p><b>Summary:</b> <b>FillOut</b>
uses its input parameter, which is a value object, as a template for
the initialization of a separate output object which may be modified by
the user after initialization and which is returned finally as an
output parameter. <b>Edit</b> accepts a state object as
input parameter and enables you to modify it "in place". Both <b>FillOut
</b>and<b> Edit</b> are terminated by clicking the OK
button.</p>
<p>In contrast to this <b>FillOut </b>and<b>
Edit</b> mechanism, persistent <i><b><font color="#ff0000"><a href="ComponentSamples.htm">
<font color="#ff0000">Lava</font></a></font></b></i><a href="ComponentSamples.htm"> component objects</a> may
be edited "directly" without explicit invocation of a forms editing
method (but using the same kind of <b><i> <font color="#ff0000">Lava</font></i></b> GUI
services as <b>FillOut </b>and<b> Edit</b>).</p>
<h3><b>See also</b> </h3>
<p>our <a href="FormSample.htm">form sample</a>
and the<i><b><font color="#ff0000">
<a href="ComponentSamples.htm"><font color="#ff0000">Lava</font>
</a></font></b></i><a href="ComponentSamples.htm"> component object</a>
samples.</p>
</body></html>

