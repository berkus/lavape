<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <title>Patterns/frameworks</title>
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c7 {font-weight: bold; text-align: left}
  p.c6 {font-weight: bold}
  p.c5 {text-align: justify}
  b.c4 {font-style: italic; color: Red}
  i.c3 {font-weight: bold; color: Red}
  h3.c2 {text-align: left}
  h2.c1 {text-align: center}
  /*]]>*/
  </style>
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  p.c1 {font-weight: bold}
  /*]]>*/
      .style1
      {
          color: #FF0000;
          font-style: italic;
          font-weight: bold;
      }
  </style>
</head>

<body>
<h2 class="c1">G<strong>enericity and Virtual Types (VTs),<br />
design patterns, and frameworks</strong></h2>

<h3 class="c2">1. Introduction</h3>

<p><a target="_blank" href="http://hillside.net/patterns/">Design patterns</a>
<a href="TypeSafety.htm#GOF">[8]</a> <a target="_blank"
href="http://c2.com/cgi/wiki?CategoryPattern">*)</a> <a target="_blank"
href="http://www.cmcrossroads.com/bradapp/docs/patterns-intro.html">**)</a> and
frameworks are frequently represented by groups of cooperating, interdependent
classes that reference each other and that have to be specialized/derived
<strong>collectively</strong> in a <strong>consistent</strong> way in order to be used in actual
applications. The term "framework" refers to the overall, top-level structure
of entire applications while "design patterns" may also deal with groups of
lower-level interdependent "generic utility classes" that may be specialized
for concrete usage. Although the definition of design patterns would be given
in natural language, perhaps enhanced by sketchy sample programs in a concrete
programming language, it would be highly desirable to provide immediately
reusable versions of design patterns in concrete programming languages like <em
class="c3">Lava</em>.</p>

<p>The widespread programming languages, however, do not provide proper
expressive means for implementing concrete incarnations of design patterns.
Parameterized classes as the <strong>"templates"</strong> of <b class="c4">C++</strong> or the
<strong>"generic classes"</strong> of <b class="c4">Eiffel</strong> do not meet the
requirements: They can be viewed as special macros or as type generation
constructs having three serious drawbacks:</p>
<ol>
  <li>They do not properly describe parameterized <strong>groups</strong> of
    interdependent classes but mainly <strong>single</strong> parameterized classes.</li>
  <li>They do not provide a derivation mechanism that allows you to derive
    specialized classes from those parameterized templates or generic
  classes.</li>
  <li>The older implementation techniques (<span class="style1">C++</span>)
    entail code replication rather than code reuse and thus are prone to blow
    up the program sizes as well as the time required for
  compilation/linking.</li>
</ol>

<p>For the design of <b class="c4">Lava</strong> we have drawn the following
conclusions from this situation and from the fact that we have a <a
href="Packages.htm#packages">package</a> notion in <b class="c4">Lava</strong>
anyway that allows us to form groups of related classes or other
declarations:</p>
<ol>
  <li><b class="c4">Lava</strong> introduces patterns as packages or classes with
    named type parameters (<strong>"pattern parameters"</strong> or <strong><a
    id="VT"></a>"virtual types"</strong>, short: <strong>VT</strong>). Packages/classes with
    VTs are called <strong>"patterns"</strong> since they are used to provide concrete
    implementations of design patterns in <em class="c3">Lava</em>.</li>
  <li>The value of a VT may designate a <b class="c4">Lava</strong> class or another
    VT that is visible at this place (see 8. below). A VT of a class may in
    particular designate its containing class and serve as a <strong
    class="c4">Lava</strong> substitute for the ThisType or MyType of other VT
    proposals.</li>
  <li><a id="derivedPattern"></a>A virtual type may also be <strong>"abstract"</strong>.
    Then its value is "void"; a non-void value may be assigned when overriding
    the abstract VT in a <strong>derived pattern</strong>.</li>
  <li>A VT <em>v</em> of a package/class P1 may be <strong>overridden</strong> in a
    <strong>derived package/class</strong> P2 by assigning a new value <em>nv</em> to it,
    which has to be derived from the value of <em>v</em> in the base
    package/class (except if <em>v</em> is abstract there). To override v you
    select it in the <a href="OverrideView.htm">override view</a> of P2 and
    proceed as described in the pertinent section.</li>
  <li>If a class <em>A</em> is declared within a pattern <em>P</em> then it can be
    extended only within <em>P</em> or within patterns derived from P.<br />
    <br />
    (This condition could possibly be weakened, but that would complicate the
    implementation as well as the rules that have to be obeyed by the
    programmers. The present wording just reflects the fact that the values of
    the VTs that may be referenced in A or its extension are defined only
    within P or patterns derived from P.)</li>
  <li>Classes from more derived patterns cannot be used in base patterns.</li>
  <li>VTs may be used to declare the types of local and member variables as
    well as of function arguments : Their actual, concrete types depend on the
    respective <strong>"pattern context"</strong> (see also 10. below<strong>)</strong>. In the
    literature this is called <strong>"covariant specialization"</strong>.</li>
  <li><a id="VTvisibility"></a>The <strong>"visibility" of VT</strong>s is restricted in
    the following way: They are visible in the containing package or class
    where they are introduced. If they are visible in a class <em>A</em> then
    also in every nested declaration and in every implementation of <em>A</em>.
    If they are visible in a class or package <em>P</em> then also in every
    class/package derived from <em>P</em> unless they are overridden there.
    Classes declared in a pattern <em>P'</em> that is derived from <em>P</em>
    cannot be referenced in <em>P</em>.</li>
  <li><a id="VTandNonVT"></a>If a class <em>A</em> is the value of a virtual type
    <em>V</em> then <em>A</em> cannot be referenced directly at any place where
    <em>V</em> is visible. It can only be referenced indirectly by references to
    <em>V</em> in these places. If A1 is derived from A within the same pattern,
    then A1 cannot be referenced directly, either. (A motivation of this rule
    is given in our <a href="IsSelfVirtualSample.htm">IsSelfVirtual
  sample</a>.)</li>
  <li><a id="patternContext"></a><b class="c4">Lava</strong> restricts the ways in
    which pattern declarations may be nested: There may be only <strong>two nested
    layers</strong> of packages or classes containing virtual types. (The VT
    implementation costs would be considerably higher if nesting of VT layers
    to any depth would be allowed.) The lower layer is called the <strong>"inner
    pattern context"</strong>, the higher one the <strong>"outer pattern context"</strong> of
    the declarations belonging to or nested in the lower layer. Generally, the
    term "pattern context of a declaration" designates the <em>combination</em>
    of the inner and outer pattern context.</li>
  <li><b class="c4">Lava</strong> supports <strong>multiple inheritance</strong> not only on
    the class level but also on the package level: A package may be derived
    from one or several other packages. Non-overridden virtual types from
    immediate or indirect base patterns are inherited and visible also in the
    derived pattern.</li>
  <li>If a pattern <em>P1</em> references a type <em>T2</em> that is the value of a
    virtual type of a separate pattern <em>P2</em> and a third pattern <em>P3</em>
    is derived from <em>P1</em> and <em>P2</em>, then the reference to <em>T2</em> is
    still treated as an "external" rather than as a virtual type reference
    (although <em>T2</em> belongs to the context of the common derived pattern
    <em>P3</em> now).</li>
  <li><b class="c4">Lava</strong> maintains the classical view of parameterized
    types (like C++ templates) insofar as it considers two instantiations of
    the same type in different pattern contexts to be incompatible.</li>
</ol>

<p>The currently valid value of a pattern parameter or <strong>"virtual type
(VT)"</strong> is taken at run time from a <strong>"virtual type table (VTT)"</strong> similar
to the usual <strong>"virtual function table (VFT)"</strong> of object-oriented
programming systems. As usual, <b class="c4">Lava</strong> provides for every <strong
class="c4">Lava</strong> object a pointer to its associated VFT, but additionally
also a pointer to an associated VTT. Like the VFT, the proper VTT is determined
on object creation, roughly spoken as the "pattern context" of its
implementation, and this is in turn the pattern context of the class that the
latter implements.</p>

<p>Generally, we use the term <strong>type</strong> for a <em>concrete class</em> or a
<em>virtual type / pattern parameter</em> in the sense explained above. (Both may
be referenced as types of variables in <em class="c3">Lava</em> programs.)</p>

<p>A type is called a <strong><a id="multiform"></a>multiform type</strong> if it is
either a virtual type or a class that is declared within a pattern. The meaning
of a multiform type may depend on the pattern context where it is used. We use
"uniform" as a synonym for "non-multiform".</p>

<p>Virtual types may be referenced anywhere (on any nesting level) within their
"owner" package or class, but also in implementations of classes belonging to
that scope. (These implementations may be located even outside this scope.)</p>

<p>Summary: A <em class="c3">Lava</em> pattern is just a quite normal package or
class declaration, having virtual types.</p>

<h3>2. Representation and specialization of patterns in <strong
class="c4">LavaPE</strong></h3>

<p>In the <a href="EditTree.htm"><b class="c4">Lava</strong> declaration view</a> a
pattern is just a quite normal <a href="Packages.htm">package</a> or <a
href="SepItfImpl.htm">class</a> declaration, having virtual types (VT). <a
id="VTvalue"></a> A virtual type vt has a name and a value VAL(vt). The value
may be a class (having the name of the virtual type) or the name of another VT.
(The term <a id="bound"></a>"bound" is also used in the literature for the
value of a VT.)</p>

<p class="c5">A virtual type may also be "abstract". Then its value is "empty";
a non-empty value may be assigned when overriding the abstract VT in a derived
pattern.</p>

<p class="c5">A VT is called "final" if its value is a class. This class cannot
be referenced then as a normal class within the containing pattern; its name
rather denotes the VT whose value it is. Outside the pattern, it denotes just
the class.</p>

<p class="c5">Moreover, classes (and virtual types anyway) of a derived pattern
P cannot be referenced in base patterns of P.</p>

<p>A VT has a <em>name</em> and a <em>value</em>. The value may be (the name of) a
class or of another VT. A virtual type may also be "abstract". Then its value
is "empty"; a non-empty value may be assigned when overriding the abstract VT
in a derived pattern.</p>

<p>Generally, package and class declarations may be <a id="nesting"></a>
<strong>nested to any depth</strong> in <b class="c4">Lava</strong> (but class declarations
cannot contain nested package declarations). For packages and classes with
virtual types the above-mentioned <a href="#patternContext">restrictions</a>
apply, however.</p>

<p>Specialization of patterns makes use of the same <a
href="OverrideView.htm"><em class="c3">Lava</em> override view</a> that is also
used for quite normal class derivation.</p>

<h3>3. Static type-safety of <strong><em>Lava</em>, related work</strong></h3>

<p>A <a href="TypeSafety.htm">special section</a> of this documentation has
been dedicated to the static type-safety of <em class="c3">Lava</em>. The
relation of our approach to other notions of virtual types is discussed <a
href="TypeSafety.htm#relatedWork">here</a>. An outline of the <a
href="TypeSafety.htm#proof">proof</a> of the static type-safety of <strong
class="c4">Lava</strong> can be found at the same place.</p>

<p class="c1">See also:</p>

<p class="c6"><a href="TypeCasts.htm">Patterns and type casts</a></p>

<p class="c7"><a href="PatternSamples.htm">Pattern samples</a></p>
</body>
</html>
