<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Why yet another programming language?</title>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="STYLESHEET" type="text/css" href="LavaStyles.css" />
  <style type="text/css" xml:space="preserve">
/*<![CDATA[*/
  h3.c5 {font-weight: bold; text-align: left}
  p.c4 {font-weight: bold; text-align: left}
  p.c3 {text-align: left}
  b.c2 {font-style: italic; color: Red}
  h2.c1 {text-align: center}
  /*]]>*/
      .style1
      {
          color: #FF0000;
      }
  </style>
</head>

<body>
  <h2 class="c1">Why yet another <strong>object-oriented</strong> programming language?</h2>

  <ol>
    <li>
      <p class="c3"><b class="c2">Lava</strong> attempts to overcome the &quot;ancient&quot; programming technology that is based on text editors and that requires detailed knowledge and meticulous observation of the syntactic rules of the respective language.<br />
      <br />
      Structure editing has many <a href="StructEdAdvant.htm">advantages</a> over text editing and has the potential to considerably increase the programmers&#39; productivity.</p>
    </li>

    <li>
      <p class="c3">The conceptual framework of object-orientation can still be improved considerably in several respects:</p>

      <ul>
        <li>
          <p class="c3">Interfaces and implementations should be strictly separated. (Remember Modula-2 and Ada!)</p>
        </li>

        <li>
          <p class="c3">Two categories of objects, state and value objects, should be distinguished.</p>
        </li>

        <li>
          <p class="c3">A unified view of object- and component-orientation should be provided.</p>
        </li>

        <li>
          <p class="c3">&quot;Genericity&quot; and design patterns should be supported properly.</p>
        </li>

        <li>
          <p class="c3">The necessity of &quot;type-casts&quot; should be overcome.</p>
        </li>
      </ul>
    </li>

    <li>
      <p class="c3">The general conceptual framework of programming languages calls for additional improvements:</p>

      <ul>
        <li>
          <p class="c3">The data flow of programs can be clarified by &quot;single-assignment&quot; just as the control flow has been clarified by abandoning &quot;go to&quot;.</p>
        </li>

        <li>
          <p class="c3">We need an application-level pointer notion to distinguish &quot;constituents&quot; and &quot;acquaintances&quot; of objects.</p>
        </li>

        <li>
          <p class="c3">&quot;Embedded SQL&quot; should be finally replaced by seamlessly integrated expressive means for database access,</p>
        </li>

        <li>
          <p class="c3">Multi-threading, transactions, and synchronization should be treated in a purely declarative way.</p>
        </li>

        <li>
          <p class="c3">Programming languages should become &quot;organization-aware&quot; and &quot;security-aware&quot;.</p>
        </li>
      </ul>
    </li>
  </ol>

  <p>For more details on all these issues see:</p>

  <p class="c4"><a href="Unsolved.htm">Urgent problems in current programming languages</a></p>

  <h3 class="c5">See also</h3>

  <p class="c4"><a href="WhyLava.htm">From <span class="style1">Java</span> and 
      <span class="style1">Visual Basic</span> to <span class="style1">Lava</span></a></p>
</body>
</html>
