<!DOCTYPE HTML PUBLIC "-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//EN"
 "hmpro4.dtd">

<HTML>
  
  <HEAD>
    <meta http-equiv="Content-Language" content="en-us">
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
    <META NAME="Author" CONTENT="Klaus D. G&uuml;nther">
    <META NAME="GENERATOR" CONTENT="Microsoft FrontPage 5.0">
    <meta name="ProgId" content="FrontPage.Editor.Document">
    <TITLE>Why yet another programming language?</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="LavaStyles.css">
  </HEAD>
  
  <BODY>
    
    <h2 ALIGN="CENTER">Why yet another  <b>object-oriented </b>programming language?</h2>
    <ol>
      <li>
      <p ALIGN="left"><b><i><font color="#FF0000">Lava</font></i></b> attempts 
      to overcome the &quot;ancient&quot; programming technology that is based on text 
      editors and that requires detailed knowledge and meticulous observation of 
      the syntactic rules of the respective language. <br>
      <br>
      Structure editing has many <a href="StructEdAdvant.htm">advantages</a> 
      over text editing and has the potential to considerably increase the 
      programmers' productivity.</li>
      <li>
      <p ALIGN="left">The conceptual framework of object-orientation can still 
      be improved considerably in several respects:<ul>
        <li>
      <p ALIGN="left">Interfaces and implementations should be strictly 
      separated. (Remember Modula-2 and Ada!)</li>
        <li>
      <p ALIGN="left">Two categories of objects, state and value objects, should 
      be distinguished.</li>
        <li>
      <p ALIGN="left">A unified view of object- and component-orientation should 
      be provided.</li>
        <li>
      <p ALIGN="left">&quot;Genericity&quot; and design patterns should be supported 
      properly.</li>
        <li>
      <p ALIGN="left">The necessity of &quot;type-casts&quot; should be overcome.</li>
      </ul>
      </li>
      <li>
      <p ALIGN="left">The general conceptual framework of programming languages 
      calls for additional improvements:<ul>
        <li>
      <p ALIGN="left">The data flow of programs can be clarified by 
      &quot;single-assignment&quot; just as the control flow has been clarified by 
      abandoning &quot;go to&quot;.</li>
        <li>
      <p ALIGN="left">We need an application-level pointer notion to distinguish 
      &quot;constituents&quot; and &quot;acquaintances&quot; of objects.</li>
        <li>
      <p ALIGN="left">&quot;Embedded SQL&quot; should be finally replaced by seamlessly 
      integrated expressive means for database access,</li>
        <li>
      <p ALIGN="left">Multi-threading, transactions, and synchronization should 
      be treated in a purely declarative way.</li>
        <li>
      <p ALIGN="left">Programming languages should become &quot;organization-aware&quot; 
      and &quot;security-aware&quot;.</li>
      </ul>
      </li>
    </ol>
    <p>For more details on all these issues see:</p>
    <p ALIGN="left"><b><a href="Unsolved.htm">Urgent problems in current 
    programming languages</a></b></p>
    <h3 ALIGN="left"><b>See also</b></h3>
    <p ALIGN="left"><b><font COLOR="#000000"><a href="WhyLava.htm">From Java and 
    Visual Basic to Lava</a></font></b></p>
  </BODY>
</HTML>