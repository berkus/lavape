Installation of Lava/LavaPE
===========================

(Note that it may be easier and cheaper to
keep your Lava installation up-to-date
by checking it out and updating it from
our SourceForge SVN repository, which
always reflects the current state of the
Lava software development.)


How to install the binary release of LavaPE on Windows
======================================================

Simply launch the downloaded lavape-<rel>-win32-bin.exe file and
follow the instructions of the installer.


How to install the LavaPE binary release for Linux
==================================================

Download the compressed tar file of the
LavaPE source distribution and store it
in the parent directory of the envisaged
lavape installation directory.

Uncompress it using the command

   tar xjvf lavape-<release>-linux-bin.tar.bz2

or, if your UNIX-tar command doesn't support
the "j" option:

   bunzip2 lavape-<release>-linux-bin.tar.bz2
   tar xf lavape-<release>-linux-bin.tar

Then just execute the install script:

   cd lavape
	 ./install

This script generates two program launch scripts
"lavape" and "lava" in lavape/bin which you can use
then to launch the Lava Programming Environment or
the Lava Interpreter.


How to install LavaPE from the source distribution on UNIX
==========================================================

Download the compressed tar file of the
LavaPE source distribution and store it
in the parent directory of the envisaged
lavape installation directory.

Uncompress it using the command

   tar xjvf lavape-<release>-src.tar.bz2

or, if your UNIX-tar command doesn't support
the "j" option:

   bunzip2 lavape-<release>-src.tar.bz2
   tar xf lavape-<release>-src.tar

Read lavape/INSTALL.txt for the details
and pre-requisites of a successfull
installation. (In particular, you need
to have GNU gcc/make and the developer version
of TrollTech/Qt4 on your Linux box; install
them from your Linux distribution CDs if necessary.
If Qt isn't installed in /usr/lib/qt you have to
provide an environment variable QTDIR that points
to the Qt4 installation directory. (Alternatively
you may also make /usr/lib/qt a symbolic link
that points to the Qt4 installation directory.)

Then build the LavaPE executables as follows:

   cd lavape
   make

This will take quite a while.
You will find the executables
of the Lava Programming Environment
in lavape/bin thereafter:
"LavaPE", "Lava", and "LPC".
(The Lava Precompiler "LPC" is needed
only during the build process.)

Launch "LavaPE", consult the Online Help,
open some sample programs from the
lavape/samples directory and enjoy the
unique structure editing features of LavaPE.

We'd appreciate very much if you would inform
us (e-mail: guenthk@users.sourceforge.net)
about any problems that you have encounterd
during the installation or while using
Lava/LavaPE.

But let us also know if you could successfully
install and use LavaPE. So far, we could not test Lava
on all platforms where we can build it successfully.
(Btw: We use always the most recent Qt release.)


How to build Lava/LavaPE on Windows from the source tarball
===========================================================

Currently this requires that you have installed either
the MinGW/MSYS software (see www.mingw.org) and the official
OpenSource version of TrollTech's Qt4 for Windows, or the free
MS VC++ 2005 Express IDE and the modified, inofficial
OpenSource version of TrollTech's Qt4 for Windows.

Windows/MinGW:
=============

TrollTech offers a Qt 4 download package that also installs
MinGW, or you can download and install MinGW separately
from www.mingw.org and download the pure Qt4 version without
MinGW.

Unpack Qt4, set the environment variable QTDIR=
<Qt4 install directory> and set environment
variable QMAKESPEC=win32-g++. Add %QTDIR%\bin to your PATH
environment variable.

Then open a DOS command window, cd to the Qt4 install
directory and execute the configure.exe program, and,
after successful configuration, the "nmake" command.

(Hint: During the Qt4 build process the MSYS and cygwin
bin directories should not be in your PATH.)

Unpack the Lava source package lavape-<release>-src.tar.bz2
to a directory of your choice. Add the MSYS\1.0\bin
directory to your PATH. Then open the MSYS command
window. Cd to the Lava install directory and execute
a "mingw32-make" command. This will build the entire
Lava software and install the LavaPE.exe and Lava.exe
executables in the lavape/bin directory.

(Further remarks as in the Linux case.)

Windows/VC++ 2005 Express:
=========================

Get the Qt4 OpenSource version for Windows from TrollTech
and VC++ 2005 Express from Microsoft. Install VC++.

Unpack Qt4 to a directory of your choice. Set QTDIR and
PATH as in the MinGW case. QMAKESPEC need not be defined.

Get the "Unofficial patches for Qt4" from the Q../Free
project at SourceForge (formerly qt-win):

  https://sourceforge.net/project/showfiles.php?group_id=49109
  
Unpack the contents of this zip file to the Qt4 install
directory. 

Launch VC++ and open the "Visual Studio 2005 Command Prompt"
window from the "Tools" menu of VC++.

Execute the "installpatch..." script.

Execute "qconfigure msvc2005". This will completely install
the "unofficial" Qt4-VC++ version.

Open the "LavaPE.sln" file from the lavape\src directory
in VC++. Execute "Build solution" from the "Build" menu.

This will build the Lava software and install the Lava
executables in the <lavape>\bin directory.


Contents of the Lava source distribution
========================================

The lavape/src directory is subdivided into the following sub-directories
which are contained in the following sub-directories:

disco ............. makes the disco shared library (Lava-unspecific basic functionality;
                    the wx... files have been taken from wxWindows
					(see http://www.wxwidgets.org) and adapted to the needs of Lava)
Precompiler ....... makes the Lava precompiler LPC (see below)
Interpreter ....... makes the Lava Interpreter shared library (the actual Lava interpreter classes)
Lava .............. makes Lava.exe (MFC-wrapper for the interpreter)
Lava_UI ........... makes the user interface of the Lava interpreter
LavaStream ........ makes the LavaStream shared library containing the native implementation
                    of the Lava stream classes
LavaBase .......... makes the LavaBase shared library (common base classes of LavaPE and Lava)
LavaExecs ......... makes the LavaExecs shared library (the "exec view" of LavaPE)
LavaGUI ........... makes the LavaGUI shared library (GUI builder, shared by LavaPE and Lava
LavaPE ............ makes LavaPE (the Lava programming environment
                    and particularly the "declaration tree view")
LavaPE_UI ......... makes the user interface of LavaPE
wxqDocView ........ makes the wxqDocView shared library serving for document/view support;
                    has been taken from the wxWidgets toolkit ( http://www.wxwidgets.org)
										and adapted to the needs of Qt and Lava



Apendix: The Lava Precompiler LPC
=================================

This has been "inherited" from a precursor project "DISCO"
(a development environment for distributed applications
with particular support for form-based workflow applications
and digital signatures for structured data (particularly "forms").

It is used in Lava only to produce serialization/deserialization
procedures for Lava programs: Lava programs are represented internally
as "abstract syntax trees" (AST). ASTs are stored in files using
a CCITT ASN.1 encoding. The C++ data types of the AST are defined
in disco\Syntax.ph (Lava declarations) and LavaExecs\Constructs.ph
(Lava executable code) using "precompiler macros".

LPC.exe translates these into regular C++ class declarations (in disco\Syntax.h)
and ASN.1 coding/decoding procedures "CDP<type-name>" (in disco\SyntaxG.cpp
and LavaExecs\ConstructsG.cpp). Constructs.ph is supplemented by Tokens.ph
which deals with the "terminal symbols" or "tokens" of the Lava executable
constructs.

So if you change the AST structure described by Syntax.ph, Constructs.ph,
and Tokens.ph then LPC is invoked subsequently to produce new *.h/*G.cpp
files.

Incompatible changes of the AST structure should be avoided, however,
if possible, since they are likely to break existing Lava programs.

In the past we couldn't completely avoid such changes and have inserted
migration code for automatic upgrades of existing Lava programs manually
in SyntaxG.cpp and ConstructsG.cpp. This migration code is executed if
an older release of a Lava program is read from a *.lava file. The
release is stored as an integer at the beginning of the file and tested
by the above-mentioned migration code. (Look for "Release" in the *G.cpp
sources.) We keep backup copies (called *G_.cpp) of these *G.cpp files
as a safeguard against inadvertent replacement by LPC.exe.

The new Qt-based portable version of Lava/LavaPE is still free of such
migration code.
